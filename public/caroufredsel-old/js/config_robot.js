var animSpeed = 1000;var s_arr = new Array();	s_arr['selector']				= '';	s_arr['basic']					= new Array();	s_arr['items']					= new Array();	s_arr['scroll']					= new Array();	s_arr['scroll']['how']			= new Array();	s_arr['scroll']['how']['aut']	= 'auto';	s_arr['auto']					= new Array();	s_arr['auto']['over']			= new Array();	s_arr['prev']					= new Array();	s_arr['prev']['over']			= new Array();	s_arr['next']					= new Array();	s_arr['next']['over']			= new Array();	s_arr['pagination']				= new Array();	s_arr['pagination']['over']		= new Array();	s_arr['mousewheel']				= new Array();	s_arr['mousewheel']['over']		= new Array();	s_arr['swipe']					= new Array();	s_arr['swipe']['over']			= new Array();function create_script() {	var str = '$(&quot;' + s_arr['selector'] + '&quot;).carouFredSel(',		ond = [ 'timeoutDuration', 'delay', 'progress', 'button', 'key', 'container', 'keys', 'anchorBuilder' ],		ar1 = new Array(),		ar2 = new Array();	for ( y in s_arr[ 'basic' ] ) {		var z = s_arr[ 'basic' ][ y ] || '';		if ( y == 'infinite' && s_arr[ 'basic' ][ 'circular' ].length == 0) continue;		if ( z.length ) ar1.push( get_kv(y, z) );	}	for ( y in s_arr[ 'items' ] ) {		var z = s_arr[ 'items' ][ y ] || '';		if ( z.length ) ar2.push( get_kv(y, z) );	}	if ( ar2.length ) {		var shorthand = false;		if ( ar2.length == 1 ) {			var z = s_arr[ 'items' ][ 'visible' ]	|| '';			if ( z.indexOf( 'variable' ) != -1 ) z = '';			if ( z.length ) shorthand = z;		} else if ( ar2.length == 3 ) {			var x = s_arr[ 'items' ][ 'visible' ]	|| '',				y = s_arr[ 'items' ][ 'width' ]		|| '',				z = s_arr[ 'items' ][ 'height' ]	|| '';			if ( x.indexOf( 'variable' ) != -1 && y.indexOf( 'variable' ) != -1 && z.indexOf( 'variable' ) != -1 ) shorthand = x;		}		if ( shorthand )	ar1.push( get_kv('items', shorthand) );		else				ar1.push( "items: {\n\t\t" + ar2.join( ",\n\t\t" ) + "\n\t}" );	}	ar2 = new Array();	for ( y in s_arr[ 'scroll' ] ) {		if ( y == 'how' ) continue;		var z = s_arr[ 'scroll' ][ y ] || '';		if ( z.length ) ar2.push( get_kv(y, z) );	}	if ( ar2.length ) {		var shorthand = false;		if ( ar2.length == 1 ) {			var x = s_arr[ 'scroll' ][ 'items' ]	|| '',				y = s_arr[ 'scroll' ][ 'duration' ]	|| '',				z = s_arr[ 'scroll' ][ 'easing' ]	|| '';				 if ( x.length ) shorthand = x;			else if ( y.length ) shorthand = y;			else if ( z.length ) shorthand = z;		}		if ( shorthand )	ar1.push( get_kv('scroll', shorthand) );		else				ar1.push( "scroll: {\n\t\t" + ar2.join( ",\n\t\t" ) + "\n\t}" );	}	for ( v in s_arr[ 'scroll' ][ 'how' ] ) {		var w = s_arr[ 'scroll' ][ 'how' ][ v ] || '',			ar2 = new Array();		if ( w.length ) {			for ( x in ond ) {				var y = ond[ x ],					z = s_arr[ w ][ y ] || '';				if ( z.length ) ar2.push( get_kv(y, z) );			}			for (y in s_arr[ w ][ 'over' ] ) {				var z = s_arr[ w ][ 'over' ][ y ] || '';				if ( !z.length ) 					continue;				var z = s_arr[ w ][ y ] || '';				if ( !z.length ) 					continue;				if ( z == s_arr[ 'scroll' ][ y ] ) 	continue;				ar2.push( get_kv(y, z) );			}						var shorthand = false;			if ( ar2.length == 0 ) {				switch ( w ) {					case 'mousewheel':					case 'swipe':						shorthand = 'true';						break;				}			} else if ( ar2.length == 1 ) {				var y = '',					z = '';				switch ( w ) {					case 'auto':						y = s_arr[ w ]['timeoutDuration'] || '';						break;					case 'prev':					case 'next':						y = s_arr[ w ]['key'] || '';						z = s_arr[ w ]['button'] || '';						break;					case 'pagination':						y = s_arr[ w ]['keys'] || '';						z = s_arr[ w ]['container'] || '';						break;					case 'mousewheel':					case 'swipe':						y = s_arr[ w ]['items'] || '';						break;				}					 if ( y.length )	shorthand = y;				else if ( z.length )	shorthand = z;			}			if ( shorthand )			ar1.push( get_kv(w, shorthand) );			else if ( ar2.length )		ar1.push( w + ": {\n\t\t" + ar2.join( ",\n\t\t" ) + "\n\t}" );		} else if ( v == 'aut' ) 		ar1.push( 'auto: false' );	}	if ( ar1.length ) str += "{\n\t" + ar1.join( ",\n\t" ) + "\n}";	str += ');';	str  = '/*\tCarouFredSel: a circular, responsive jQuery carousel.\n\tConfiguration created by the &quot;Configuration Robot&quot;\n\tat caroufredsel.frebsite.nl\n*/\n' + str;	$('#schoolboard > div').html( '<pre class="brush: jscript;">' + str + '</pre>' );	SyntaxHighlighter.highlight();}function get_kv( y, z ) {	return y + ": " + z;}function get_object( f ) {	d = f.name.split( '_' );	return d[d.length - 1];}function get_option( f ) {	return f.name.split( '_' )[1];}function toggle_questions( $i ) {	$i.each(function() {		if ( $(this).is( ':visible' ) )	close_elem( $(this) );		else 							open_elem( $(this) );	});}function open_elem( $i ) {	$i.each(function() {		if ($(this).hasClass( 'hidden_item' )) {			$(this).removeClass( 'hidden_item' ).addClass( 'item' );		}		if ($(this).is( ':visible' )) {			$(this).show();		} else {			$(this).slideDown(animSpeed);		}			});	var $j = $i.parent();	if ($j.hasClass( 'closed' )) $j.removeClass( 'closed' ).addClass( 'opened' );	if ($i.hasClass( 'questions' ) &&		$j.hasClass( 'chapter' )	) {		$j.removeClass( 'has_errors all_ok' );		setTimeout(function() {			scroll_to( $j );		}, animSpeed);	}}function close_elem( $i, errorTest ) {	$i.each(function() {		if ($(this).is( ':visible' )) {			$(this).slideUp(animSpeed, function() {				if ($(this).hasClass( 'item' )) {					$(this).removeClass( 'item' ).addClass( 'hidden_item' );				}			});		} else {			$(this).hide();		}	});	var $j = $i.parent();	if ($j.hasClass( 'opened' )) $j.removeClass( 'opened' ).addClass( 'closed' );	if ($i.hasClass( 'questions' ) &&		$j.hasClass( 'chapter' ) &&		errorTest !== false	) {			var callback =   ( $i.find( '.error.opened' ).length ) 			? function() { $j.addClass( 'has_errors' ); }			: function() { $j.addClass( 'all_ok' );  };		setTimeout( callback, animSpeed );	}}function open_error( f )	{	open_elem( $(f).parents( '.item:first' ).find( '.error' ).removeClass( 'closed' ).addClass( 'opened' ) ); }function close_error( f ) 	{	close_elem( $(f).parents( '.item:first' ).find( '.error' ).removeClass( 'opened' ).addClass( 'closed' ) ); }function scroll_to( $x ) 	{	$( 'html, body' ).stop().animate({ scrollTop: $x.offset().top - 75 }, animSpeed - 100); }function update_chapters() {	setTimeout(function() {		$('.chapter').removeClass( 'no_border' ).find( 'a.button' ).show();		$('.chapter:visible:last').addClass( 'no_border' ).find( 'a.button' ).hide();		close_elem( $('.chapter:hidden .questions'), false );	}, animSpeed + 200);}function test_number( f ) {	var r = false;	$(f).parents( '.item:first' ).find('input.number').each(function() {		var v  = $(this).val().replace(/\s/g, '');		if (v != $(this).val()) $(this).val( v );		if (v.length && isNaN( v ) ) r = true;	});	if (r)	open_error( f );	else	close_error( f );}function test_selector( f ) {	var v = $(f).val(),		e = ' h1 h2 h3 h4 h5 h6 div p ul ol li span a ';	if (v.length == 0 ||	(	v.indexOf( '.' ) == -1 &&		v.indexOf( '#' ) == -1 &&		v.indexOf( '>' ) == -1 &&		e.indexOf( ' ' + v + ' ') == -1)	) 		open_error( f );	else 	close_error( f );}function test_function( f ) {	var v = $(f).val();	if (v.indexOf( 'return' ) == -1 &&		v.length)	open_error( f );	else 			close_error( f );}function valtype( v, p ) {	if ( typeof v == 'undefined' || v.length == 0 )	return '';	if ( typeof p == 'undefined' ) 		p = false;	if ( p ) {		if ( typeof p == 'string' )		p = ' ' + p + ' ';		else							p = '';		return "function(" + p + ") {\n\t\t\t" + v.split("\n").join("\n\t\t\t") + "\n\t\t}";	}	if ( !isNaN( v ) )					return v;	if ( v !== 'true' && v !== 'false'	  && v.substr(0, 1) != '[' ) 		return '&quot;' + v + '&quot;';	return v;}function align_toggelen() {	var d = $('input[name=a_hor_ver]:checked').val(),		$w = $('input[name=r_width]').filter(':checked'),		$h = $('input[name=r_height]').filter(':checked'),		$it = $('.is_fixed_size');	if ((d == 'h' && $w.val() == 'fixed') ||		(d == 'v' && $h.val() == 'fixed')	) {		open_elem( $it );	} else {		close_elem( $it );	}}function align_opslaan() {	var v = $('input[name=r_align]').filter( ':checked' ).val().split('/'),		d = $('input[name=a_hor_ver]:checked').val(),		s = (d == 'h') ? 'width' : 'height';	if (parseInt( s_arr[ 'basic' ][ s ] ) > 0) {		v = (d == 'h') ? v[0] : v[1];		v = ( v == 'center') ? '' : valtype( v )	} else {		v = '';	}	s_arr[ 'basic' ][ 'align' ] = v;}$(function() {	$('#robot_intro a.button').click(function() {		close_elem( $('#robot_intro') );		open_elem( $('#robot_questions') );		update_chapters();		setTimeout(function() {			open_elem( $('#robot_questions .questions:first') );		}, animSpeed);		return false;	});	$('.transparent_schoolboard').append( '<div />' );	$('#schoolboard_outer').append( '<div id="schoolboard_bottom" />' );	$('.hidden_item').hide();	$('#robot_questions .chapter').addClass( 'closed' )		.find( 'h4' ).prepend( '<span class="arrow"><span>&gt;</span></span>' ).css( 'cursor', 'pointer' ).hover(				function() { $(this).parent().addClass( 'hover' ); },				function() { $(this).parent().removeClass( 'hover' ); }			).click(function() {				toggle_questions( $(this).parent().find( '.questions' ) );				return false;			}).end()		.find( '.questions' ).append( '<div class="item no_border"><a href="#" class="button">continue</a></div>' )		.find( 'a.button' ).click(function() {				var $h = $(this).parents( '.questions' ),					$i = $h.parent();				if ($i.hasClass( 'chapter' )) {					scroll_to( $i );				}				close_elem( $h, true );				open_elem( $h.parent().nextAll( ':visible:first' ).find( '.questions' ) );				return false;			}).end()		.find( ':input' )			.filter( '.number'   ).blur(function() { test_number( this ); }).end()			.filter( '.selector' ).blur(function() { test_selector( this ); }).end()			.filter( '.function' ).blur(function() { test_function( this ); });/*	O P E N E N   E N   S L U I T E N   V R A G E N   V A N   T O E P A S S I N G*/	$('input[name=intermediate_configuration]').click(function() {		var $it = $('.is_intermediate');		if ( $(this).is( ':checked' ) )	open_elem( $it );		else							close_elem( $it );	});	//	infinite toggelen	$('input[name=a_circular]').click(function() {		var $it = $('.not_circular');		if ( $(this).is( ':checked' ) )	close_elem( $it );		else 							open_elem( $it );	});	$('.not_circular').hide();	//	breedte en hoogte toggelen	$('input[name=r_width], input[name=r_height]').click(function() {		var f = this.name.substr( 2 ),			$it = $('.is_' + f);		if ( $(this).filter( 'input[value=fixed]:checked' ).length )	open_elem( $it );		else															close_elem( $it );	});	//	align toggelen	$('input[name=r_width], input[name=r_height], input[name=a_hor_ver]').click(function() {		align_toggelen();	});	//	breedte en hoogte van items toggelen	$('input[name=r_width_items], input[name=r_height_items]').click(function() {		var f = this.name.substr( 2 ),			$it1 = $('.is_' + f + '_fixed' ),			$it2 = $('.is_' + f + '_variable');		if ( $(this).filter( 'input[value=fixed]:checked' ).length )	open_elem( $it1 );		else 															close_elem( $it1 );		if ( $(this).filter( 'input[value=variable]:checked' ).length )	open_elem( $it2 );		else 															close_elem( $it2 );	});	//	visible, start, minimum, transition en duration select/input:text en-/disabelen	$('input[type=radio]').click(function() {		$(this).parents( 'table' ).find( 'select, input:text' ).attr( 'disabled', 'disabled' ).css( 'opacity', 0.5 );		$(this).parents( 'tr' ).find( 'select, input:text' ).removeAttr( 'disabled' ).css( 'opacity', 1 );	}).filter( ':not(:checked)' ).parents( 'tr' ).find( 'select, input:text' ).attr( 'disabled', 'disabled' ).css( 'opacity', 0.5 );	//	extra opties a.d.h.v. hoe te scrollen toggelen	$('input[name=a_how_scroll]').click(function() {		var $it = $('.is_' + this.value);		if ( $(this).is( ':checked' ) ) open_elem( $it, true );		else 							close_elem( $it, true );		update_chapters();	});	//	horizontaal of verticaal: left-right / top-bottom toggelen	var $ihv = $('input[name=a_hor_ver]'),		$adh = $('.is_horizontal'),		$adv = $('.is_vertical').hide();	$ihv.click(function() {		if ( $ihv.filter( ':checked' ).val() == 'h' ) {			$adh.show();			$adv.hide();		} else {			$adh.hide();			$adv.show();		}	});	//	progress bar toggelen	$('input[name=r_progress_auto]').click(function() {		var $it = $('.is_progress');		if ( $(this).is( ':checked' ) )	open_elem( $it );		else 							close_elem( $it );	});	//	overschrijven van scroll-opties	$('input[name^=r_override_]').click(function() {		var v = this.value,			n = get_object( this ),			$i = $('.is_' + v + '_' + n);		if ( $(this).is( ':checked' ) )	open_elem( $i );		else 							close_elem( $i );	});	//	keyCode onkeyup onderscheppen	$('input[name^=a_key_]').keyup(function( e ) {		var  k = e.keyCode;		if ( k == 8 ||			 k == 46 ) k = '';		if ( k == 39 ) k = 'right';		if ( k == 37 ) k = 'left';		if ( k == 38 ) k = 'up';		if ( k == 40 ) k = 'down';				$(this).val( k ).change();	});	//	anchorBuilder toggelen	$('input[name=a_container_pagination]').change(function() {		var $it = $('.is_container_pagination');		if ( this.value.length )	open_elem( $it );		else 						close_elem( $it );	});/*	I N V O E R   O P S L A A N*/	//	html-element	$('input[name=a_selector]').change(function() {		s_arr[ 'selector' ] = this.value;	});	//	circular + infinite	$('input[name=a_circular], input[name=a_infinite]').click(function() {		s_arr[ 'basic' ][ get_option( this ) ] = ( $(this).is( ':checked' ) ) ? '' : 'false';	});	//	direction	$('input[name=a_hor_ver], input[name=a_direction_h], input[name=a_direction_v]').click(function() {		var v = $('input[name=a_direction_' + $('input[name=a_hor_ver]:checked').val() + ']:checked').val();		s_arr[ 'basic' ][ 'direction' ] = ( v == 'left' ) ? '' : valtype( v );	});		//	align	$('input[name=a_hor_ver], input[name=r_align]').click(function() {		align_opslaan();	});	//	visible, minimum, start, width, height items, scroll	$('input[name=r_visible_items], input[name=r_minimum_items], input[name=r_start_items], input[name=r_width_items], input[name=r_height_items], input[name^=r_items_]').click(function() {		var o = get_object( this ),			f = get_option( this ),			v = this.value,			x = '';				if ( v == 'fixed' ) {			$(':input[name=a_' + f + '_' + o + ']').change();			return;		}		if ( v == 0 || v == '0' ) v = "";		s_arr[ o ][ f ] = valtype( v );	});	//	selectboxes	$('select[name=a_visible_items], select[name=a_minimum_items], select[name=a_start_items], select[name^=a_fx_]').change(function() {		var o = get_object( this ),			f = get_option( this ),			v = valtype( this.value );		if ( v == 0 || v == '0' ) v = "";		s_arr[ o ][ f ] = v;	});	//	width, height items	$('input[name=a_width_items], input[name=a_height_items]').change(function() {		var o = get_object( this ),			f = get_option( this ),			v = this.value,			p = $('select[name=s_' + f + '_' + o + '_type]').val();				if ( p && p == 'percent' ) {			v += '%';		}		s_arr[ o ][ f ] = valtype( v );	});	//	px/% selectboxes items	$('select[name=s_width_items_type], select[name=s_height_items_type]').change(function() {		$('input[name=a_' + get_option( this ) + '_items]').change();	});	//	width, height carousel	$('input[name=r_width], input[name=r_height]').click(function() {		var f = this.name.substr( 2 ),			v = this.value;		if ( v == 'fixed' ) {			$('input[name=a_' + f + ']').change();			return;		}		s_arr[ 'basic' ][ f ] = valtype( v );		align_opslaan();	});	$('input[name=a_width], input[name=a_height]').change(function() {		var f = this.name.substr( 2 ),			v = this.value,			p = $('select[name=s_' + f + '_type]').val();				if ( p && p == 'percent' ) {			v += '%';		}		s_arr[ 'basic' ][ f ] =  valtype( v );		align_opslaan();	});	//	px/% selectboxes	$('select[name=s_width_type], select[name=s_height_type]').change(function() {		$('input[name=a_' + get_option( this ) + ']').change();	});	//	hoe te scrollen	$('input[name=a_how_scroll]').click(function() {		var v = this.value;		s_arr[ 'scroll' ][ 'how' ][ v.substr( 0, 3 ) ] = ( $(this).is( ':checked' ) ) ? v : '';	});	//	wat overschrijven	$('input[name^=r_override_]').click(function() {		var v = this.value;		s_arr[ get_object( this ) ][ 'over' ][ v ] = ( $(this).is( ':checked' ) ) ? v : '';	});	//	items + timeoutDuration + delay (numbers)	//	prev- + next-buttons + pagination-container, auto-progress-bar (selectors)	//	prev- + next-key (divers)	$('select[name^=a_items_], input[name=a_timeoutDuration_auto], input[name=a_delay_auto]')	.add('input[name^=a_button_], input[name=a_container_pagination], input[name=a_progress_auto]')	.add('input[name^=a_key_]')	.change(function() {		s_arr[ get_object( this ) ][ get_option( this ) ] = valtype( this.value );	});	//	progress-bar	$('input[name=r_progress_auto]').click(function() {		s_arr[ get_object( this ) ][ get_option( this ) ] = ( $(this).is( ':checked' ) ) ? valtype( $('input[name=a_progress_auto]').val() ) : '';	});	//	pauseOnHover + pagination-keys (booleans)	$('input[name^=a_pauseOnHover_], input[name=a_keys_pagination]').click(function() {		s_arr[ get_object( this ) ][ get_option( this ) ] = this.value;	});	//	pagination-anchorBuilder (function)	$('textarea[name=a_anchorBuilder_pagination]').change(function() {		s_arr[ get_object( this ) ][ get_option( this ) ] = valtype( this.value, 'nr' );	});	//	easing	$('input[name^=r_transition_]').click(function() {		s_arr[ get_object( this ) ][ 'easing' ] = valtype( $(this).parents('table').find('input:radio:checked').parents('tr').find('select').val() );	});	$('select[name^=a_transition_]').change(function() {		s_arr[ get_object( this ) ][ 'easing' ] = valtype( this.value );	});		//	duration	$('input[name^=r_duration_]').click(function() {		s_arr[ get_object( this ) ][ 'duration' ] = valtype( $(this).parents('table').find('input:radio:checked').parents('tr').find('input:text, input:hidden').val() );	});	$('input[name^=a_duration_]').change(function() {		s_arr[ get_object( this ) ][ 'duration' ] = valtype( this.value );	});	$('input:text, textarea, select').change(create_script);	$('input:radio, input:checkbox').click(create_script);});