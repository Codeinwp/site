<?php	$description = 'Learn some of the most handy tips and tricks for the carouFredSel-plugin to understand it better.';	$keywords = 'tips, tricks, support, handy, knowledge, how-to, options, settings';	$title = 'Tips &amp; tricks - Support';	$scripts = '		<link type="text/css" media="all" rel="stylesheet" href="../css/examples.css" />';	include_once '../functies/layout_pre.php';?>				<div id="usage">					<h1>Tips &amp; tricks</h1>					<br />					<h4 id="_configuration_robot">Congifuration robot</h4>					<p>Need help with all the configuration options? Give the <a href="../configuration-robot.php"><strong>configuration robot</strong></a> a try!</p>					<br />					<h4 id="_specify_size">Specify the size of an image</h4>					<p>If you're scrolling images, don't forget to specify the sizes. Otherwise Webkit browsers (Chrome and Safari) can't measure the size of the images onDocumentReady.</p>					<div class="script">						<p class="head"><strong>Via the HTML attributes:</strong></p><pre class="brush: xml;">&lt;img src=&quot;image1.jpg&quot; width=&quot;140&quot; height=&quot;140&quot; /&gt;</pre>					</div>					<br />					<div class="script">						<p class="head"><strong>Via the CSS properties:</strong></p><pre class="brush: css;">#foo img {	width	: 140px;	height	: 140px;}</pre>					</div>					<br />					<div class="script">						<p class="head"><strong>Via the plugin configuration:</strong></p><pre class="brush: jscript;">$(document).ready(function() {	$(&quot;#foo&quot;).carouFredSel({		items	: {			width	: 140,			height	: 140		}	});});</pre>					</div>					<br />					<p>If you absolutely see no change of specifying the sizes, try firing the plugin onWindowLoad in stead of onDocumenrReady.</p>					<div class="script"><pre class="brush: jscript;">$(window).load(function() {	$(&quot;#foo&quot;).carouFredSel();});</pre>					</div>					<br />					<br />					<h4 id="_float_left">Use block-elements that float left</h4>					<p>To ensure the plugin is able to measure the correct sizes, always use <code>display: block;</code> for the items.<br />						In a horizontal carousel, you should also make the items <code>float: left;</code>.</p>					<div class="half">						<div class="left script">							<p class="head"><strong>HTML</strong></p><pre class="brush: xml;">&lt;div class=&quot;image_carousel&quot;&gt;	&lt;div id=&quot;foo&quot;&gt;		&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image1.jpg&quot; /&gt;&lt;/a&gt;		&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image2.jpg&quot; /&gt;&lt;/a&gt;		&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image3.jpg&quot; /&gt;&lt;/a&gt;	&lt;/div&gt;	&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;&lt;/div&gt;</pre>						</div> <!-- /left -->						<div class="right script">							<p class="head"><strong>CSS</strong></p><pre class="brush: css;">.image_carousel a {	display: block;	float: left;}div.clearfix {	float: none;	clear: both;}</pre>						</div> <!-- /right -->						<div class="clearfix"></div>					</div> <!-- /half -->										<br />					<br />					<h4 id="_debug_firebug">Debug with FireFox and FireBug</h4>					<p>The plugin logs error-messages to the <a href="http://getfirebug.com/" target="_blank">FireBug</a> console.<br />						So if your carousel isn't doing what you expected, just open up the console and you might read: <em>&quot;carouFredSel: not a valid number.&quot;</em>.<br />						If you set the <code>debug</code> option for the second configuration-object to <code>true</code>, it will also log debugging-information to help you out.</p>					<br />					<h4>Set a <em>speed</em> for the transition in stead of a <em>duration</em>.</h4>					<p>Like every jQuery animation, a carousel created by the carouFredSel-plugin wil scroll for a specific amount of time, regardless of the distance, i.e. <em>duration</em>. This is fine if the distance is always the same, but unfortunately it isn't.<br />						For example when your carousel contains items with variable sizes, or when you're scrolling a variable number of items.</p>					<p><strong>A speed for items with variable sizes</strong><br />						Give the <code>duration</code> a numerical value less then <code>10</code> to calculate a scrolling speed based on the number of pixels to scroll. If you do so, the value will be interpreted as the amount of pixels scrolled per millisecond.<br />						The duration will be calculated as follows: <code>duration = distance in pixels / pixels per millisecond;</code>.<p>					<p><strong>A speed for scrolling a variable number of items</strong><br />						Enter <code>duration: &quot;auto&quot;</code> to calculate a scrolling speed based on the number of items to scroll.<br />						The duration will be calculated as follows: <code>duration = scroll.duration / scroll.items * number of items to scroll;</code><br />						<em>Note 1:</em> You might also want to set <code>prev.duration</code> and <code>next.duration</code> to <code>&quot;auto&quot;</code> when you're using the <code>slideTo</code> event.<br />						<em>Note 2:</em> The duration is NOT set to &quot;auto&quot; by default because -as mentioned- every jQuery animation uses a <em>duration</em>.</p>					<br />					<h4 id="_shorthand_options">Options shorthand notation</h4>					<p>Inspired by the &quot;Write less, do more&quot; concept, the carouFredSel-plugin options supports shorthand notation.<br />						In the configuration, the options <code>items</code>, <code>scroll</code>, <code>auto</code>, <code>prev</code>, <code>next</code> and <code>pagination</code> can be either an object or any valid value for the most important option(s) of that object (<code>visible</code> or <code>width+height</code> for the <code>items</code> option, <code>items</code>, <code>duration</code> or <code>easing</code> for the <code>scroll</code> option, <code>play</code> or <code>timeoutDuration</code> for the <code>auto</code> option, <code>button</code> or <code>key</code> for the <code>prev</code> and <code>next</code> options, <code>container</code> or <code>keys</code> for the <code>pagination</code> option).</p>					<p>For example, making the <code>prev</code> option an object with <code>button: &quot;#prev_button&quot;</code>, has the same results as making it <code>&quot;#prev_button&quot;</code>.</p>					<p>All possible shorthand options:</em></p>					<div class="half">						<div class="left script">							<p class="head"><strong>JavaScript</strong> (extensive options)</p><pre class="brush: jscript;">$(&quot;#foo1&quot;).carouFredSel({	items : {		visible : 10	}});//	--------------------------------------- //$(&quot;#foo2&quot;).carouFredSel({	items : {		width : &quot;variable&quot;,		height: &quot;variable&quot;	}});//	--------------------------------------- //$(&quot;#foo3&quot;).carouFredSel({	scroll : {		items : 2	}});//	--------------------------------------- //$(&quot;#foo4&quot;).carouFredSel({	scroll : {		duration : 1000	}});//	--------------------------------------- //$(&quot;#foo5&quot;).carouFredSel({	scroll : {		easing : &quot;linear&quot;	}});//	--------------------------------------- //$(&quot;#foo6&quot;).carouFredSel({	auto : {		play : false	}});//	--------------------------------------- //$(&quot;#foo7&quot;).carouFredSel({	auto : {		timeoutDuration : 3000	}});//	--------------------------------------- //$(&quot;#foo8&quot;).carouFredSel({	prev : {		button : &quot;#prev_button&quot;	},	next : {		button : &quot;#next_button&quot;	}});//	--------------------------------------- //$(&quot;#foo9&quot;).carouFredSel({	prev : {		key : &quot;left&quot;	},	next : {		key : &quot;right&quot;	}});//	--------------------------------------- //$(&quot;#foo10&quot;).carouFredSel({	pagination : {		container : &quot;#pagination&quot;	}});//	--------------------------------------- //$(&quot;#foo11&quot;).carouFredSel({	pagination : {		keys : true	}});//	--------------------------------------- //$(&quot;#foo12&quot;).carouFredSel({	swipe : {		onTouch : true	}});//	--------------------------------------- //$(&quot;#foo13&quot;).carouFredSel({	swipe : {		items : 3	}});//	--------------------------------------- //$(&quot;#foo14&quot;).carouFredSel({	mousewheel : {		onTouch : true	}});//	--------------------------------------- //$(&quot;#foo15&quot;).carouFredSel({	mousewheel : {		items : 3	}});</pre>						</div> <!-- /left -->						<div class="right script">							<p class="head"><strong>JavaScript</strong> (shorthand options, same result)</p><pre class="brush: jscript;">$(&quot;#foo1&quot;).carouFredSel({	items : 10});/*	all other options for the items-object	will be inherited from the default values *///	--------------------------------------- //$(&quot;#foo2&quot;).carouFredSel({	items : &quot;variable&quot;});/*	all other options for the items-object	will be inherited from the default values *///	--------------------------------------- //$(&quot;#foo3&quot;).carouFredSel({	scroll : 2});/*	all other options for the scroll-object	will be inherited from the default values *///	--------------------------------------- //$(&quot;#foo4&quot;).carouFredSel({	scroll : 1000});/*	all other options for the scroll-object	will be inherited from the default values *///	--------------------------------------- //$(&quot;#foo5&quot;).carouFredSel({	scroll : &quot;linear&quot;});/*	all other options for the scroll-object	will be inherited from the default values *///	--------------------------------------- //$(&quot;#foo6&quot;).carouFredSel({	auto : false});/*	all other options for the auto-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo7&quot;).carouFredSel({	auto : 3000});/*	all other options for the auto-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo8&quot;).carouFredSel({	prev : &quot;#prev_button&quot;,	next : &quot;#next_button&quot;});/*	all other options for the prev-	and next-objects will be inherited	from the scroll-object*///	--------------------------------------- //$(&quot;#foo9&quot;).carouFredSel({	prev : &quot;left&quot;,	next : &quot;right&quot;});/*	all other options for the prev- 	and next-objects will be inherited 	from the scroll-object*///	--------------------------------------- //$(&quot;#foo10&quot;).carouFredSel({	pagination : &quot;#pagination&quot;});/*	all other options for the pagination-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo11&quot;).carouFredSel({	pagination : true});/*	all other options for the pagination-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo12&quot;).carouFredSel({	swipe : true});/*	all other options for the swipe-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo13&quot;).carouFredSel({	swipe : 3});/*	all other options for the swipe-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo14&quot;).carouFredSel({	mousewheel : true});/*	all other options for the swipe-object	will be inherited from the scroll-object *///	--------------------------------------- //$(&quot;#foo15&quot;).carouFredSel({	mousewheel : 3});/*	all other options for the swipe-object	will be inherited from the scroll-object */</pre>						</div> <!-- /right -->						<div class="clearfix"></div>					</div> <!-- /half -->					<br />					<br />					<h4 id="_link_anchors">Controlling the carousel externally with anchor-links</h4>					<p>It is very easy to externally control a carousel, just have a look at the <a href="../custom_events.pgp">custom events-page</a>.<br />						But it's even easier; any link (<code>&lt;a&gt;</code>-tag) on your page can be turned into a link that externally controlls the carousel. Simpy set the <code>href</code> to the item's ID and set the <code>class</code> to &quot;caroufredsel&quot;.</p><pre class="brush: xml;">&lt;a href=&quot;#carousel_item_id&quot; class=&quot;caroufredsel&quot;&gt;click to slide&lt;/a&gt;</pre>					<p>If you do so, clicking the link will automatically slide the carousel to the item with <code>id=&quot;carousel_item_id&quot;</code>.<br />						If you want to customize this functionality, have a look at the <code>linkAnchors</code> <a href="../custom-events.php">custom event</a>.</p>					<br />					<h4 id="_half_filled_pages">How the pagination handles half filled pages</h4>					<p>The image-carousel examples on this website contain 12 images and show 5. If the carousel is circular, this will result in the following set of pages:</p>					<div class="list_carousel" style="position: relative;">						<img style="position: absolute; left: 250px; top: 90px;" src="../images/specimen_stamp.png" alt="specimen_stamp" width="200" height="120" />						<strong>Page 1:</strong>						<ul>							<li>1</li>							<li>2</li>							<li>3</li>							<li>4</li>							<li>5</li>						</ul>						<div class="clearfix"></div>						<div class="pagination" style="width: 350px;">							<a class="selected"><span>1</span></a>							<a><span>1</span></a>							<a><span>1</span></a>						</div>						<br />						<strong>Page 2:</strong>						<ul>							<li>6</li>							<li>7</li>							<li>8</li>							<li>9</li>							<li>10</li>						</ul>						<div class="clearfix"></div>						<div class="pagination" style="width: 350px;">							<a><span>1</span></a>							<a class="selected"><span>1</span></a>							<a><span>1</span></a>						</div>						<br />						<strong>Page 3:</strong>						<ul>							<li>11</li>							<li>12</li>							<li>1</li>							<li>2</li>							<li>3</li>						</ul>						<div class="clearfix"></div>						<div class="pagination" style="width: 350px;">							<a><span>1</span></a>							<a><span>1</span></a>							<a class="selected"><span>1</span></a>						</div>					</div>					<p>As shown above, because the number of total items is not a multiplication of the visible items, the third page is a half filled page and also shows three items of the first page. In this case, combining the pagination with previous- and next-buttons, might cause the pagination to function odd or in an unexpected way. But in fact, it does work correctly.</p>					<br />					<h4 id="_building_custom_pagination">Building a custom pagination</h4>					<p>By default, the plugin uses the public function <code>$.fn.carouFredSel.pageAnchorBuilder</code> to build the pagination-anchors:</p>					<div class="half">						<div class="left script">							<p class="head"><strong>JavaScript</strong></p><pre class="brush: jscript;">$.fn.carouFredSel.pageAnchorBuilder=function(nr) {	var str  = '&lt;a href=&quot;#&quot;&gt;';		str += '&lt;span&gt;'+nr+'&lt;/span&gt;';		str += '&lt;/a&gt;';	return str;}</pre>						</div> <!-- /left -->						<div class="right script">							<p class="head"><strong>HTML</strong></p><pre class="brush: xml;">&lt;div id=&quot;pagination&quot;&gt;	&lt;a href=&quot;#&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/a&gt;	&lt;a href=&quot;#&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;	&lt;a href=&quot;#&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/a&gt;	&lt;a href=&quot;#&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/a&gt;	&lt;a href=&quot;#&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;</pre>						</div> <!-- /right -->						<div class="clearfix"></div>					</div> <!-- /half -->					<p>To build a custom pagination, simply override this function in the configuration:</p>					<div class="half">						<div class="left script">							<p class="head"><strong>JavaScript</strong></p><pre class="brush: jscript;">$(&quot;#foo&quot;).carouFredSel({	pagination : {		container		: &quot;#pagination&quot;,		anchorBuilder	: function(nr) {			return &quot;&lt;div&gt;&quot;+nr+&quot;&lt;/div&gt;&quot;;		}	}});</pre>						</div> <!-- /left -->						<div class="right script">							<p class="head"><strong>HTML</strong></p><pre class="brush: xml;">&lt;div id=&quot;pagination&quot;&gt;	&lt;div&gt;1&lt;/div&gt;	&lt;div&gt;2&lt;/div&gt;	&lt;div&gt;3&lt;/div&gt;	&lt;div&gt;4&lt;/div&gt;	&lt;div&gt;5&lt;/div&gt;	&lt;div&gt;6&lt;/div&gt;&lt;/div&gt;</pre>						</div> <!-- /right -->						<div class="clearfix"></div>					</div> <!-- /half -->					<p><em>Note:</em> Every direct descendant of the <code>pagination.container</code> element will become an anchor for the pagination,<br />						it does not need to be a link (<code>a</code> element) nor does it need the <code>href</code> attribute.</p>					<br />					<h4 id="_wrapped_inside_wrapper">Carousel wrapped inside a wrapper</h4>					<p>After the plugin has been executed, the container-element has been wrapped inside a div-element with <code>class=&quot;caroufredsel_wrapper&quot;</code>.<br />						This is needed to hide items until they come scrolling in (and for the scrolling itself).</p>					<div class="half">						<div class="left script">							<p class="head"><strong>HTML</strong> (after executing the plugin)</p><pre class="brush: xml;">&lt;div class=&quot;image_carousel&quot;&gt;	&lt;div class=&quot;caroufredsel_wrapper&quot;&gt;		&lt;div id=&quot;foo&quot;&gt;			&lt;img src=&quot;image1.jpg&quot; /&gt;			&lt;img src=&quot;image2.jpg&quot; /&gt;			&lt;img src=&quot;image3.jpg&quot; /&gt;		&lt;/div&gt;	&lt;/div&gt;	&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;&lt;/div&gt;</pre>						</div> <!-- /left -->						<div class="right script">							<p class="head"><strong>CSS</strong> (is actually added to the style-attribute)</p><pre class="brush: css;">.caroufredsel_wrapper {	width: 100;	/* calculated on the fly */	height: 50;	/* calculated on the fly */	position: relative;	overflow: hidden;}#foo {	width: 300;	/* calculated on the fly */	position: absolute;}</pre>						</div> <!-- /right -->						<div class="clearfix"></div>					</div> <!-- /half -->					<br />					<br />					<h4 id="_prevent_fouc">Preventing F.O.U.C.</h4>					<p>When using the carouFredSel-plugin, you may see a Flash Of Unstyled Content (F.O.U.C.). This is because the browser may render elements before the DOM is fully loaded and before the DOMContentLoaded event is fired.<br />						Fortunately it can be prevented, pretty easy actually. Simply apply something like the following CSS to your HTML element.</p><pre class="brush: css;">#foo {					/*	the HTML element that will be turned into a carousel */	width: 870px;		/*	depending on your situation */	height: 175px;		/*	depending on your situation */	overflow: hidden;}</pre>				</div> <!-- /usage --><?php	include_once '../functies/layout_post.php';?>