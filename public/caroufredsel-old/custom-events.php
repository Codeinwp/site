<?php	function sortParams($class) {		echo '							<tr class="'.$class.'">								<td class="no_border"></td>								<td colspan="4"><em>Note:</em> The order of these options is not important, they are sorted automatically based on the datatype.</td>							</tr>';	}	$description = 'An overview of the available custom events for a carousel created with the carouFredSel-plugin. With these custom events, the carousel can be controlled externally.';	$keywords = 'custom, events, play, pause, stop, finish, resume, prev, next, slideTo, insertItems, removeItems, configuration, linkAnchors, destroy, caroufredsel';	$title = 'Custom events';	$links = '		<link rel="stylesheet" type="text/css" media="all" href="css/table.css" />';	$scripts = '		<script type="text/javascript" language="javascript" src="js/table.js"></script>';	include_once 'functies/layout_pre.php';	$paramtxt = '<br />									<small>Click to <span style="display: none;">show</span><span>hide</span> the parameters for this event.</small>';?>				<h1>Custom events</h1>				<p>After the plugin has been executed, a series of custom events are available for the carousel.<br />					With these custom events, the carousel can be controlled externally. Have a look at the <a href="code-examples/custom-events.php">custom event code examples page</a> to see just how.</p>				<div class="warning">					<p><strong>Please note:</strong><br />						As of version 6.0.0, passing a configuration-object to the <code>prev</code>, <code>next</code> or <code>slideTo</code>-events will not override the object specified via the configuration. Instead it will now only extend it.</p>				</div>				<div class="table transparent p1">					<table cellpadding="0" cellspacing="0" border="0" width="930">						<col width="30" />						<col width="180" />						<col width="130" />						<col width="100" />						<thead>							<tr>								<td></td>								<td>Event ( Parameters )</td>								<td>Default value</td>								<td>Datatype</td>								<td>Description</td>							</tr>						</thead>						<tbody>							<tr class="new_item">								<td><a href="#play" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">play <span class="params">( direction, delay, resumeStopped )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will restart/resume the timeout between transitions after pausing (only applies when the carousel scrolls automatically).</td>							</tr>							<tr id="play" class="play no_border">								<td colspan="5">(</td>							</tr>							<tr class="play no_border">								<td></td>								<td>direction</td>								<td>null</td>								<td>String</td>								<td>The direction to scroll the carousel. <em>Possible values:</em> <code>&quot;prev&quot;</code> or <code>&quot;next&quot;</code>.<br />									If <code>null</code>, the <code>direction</code> of the configuration is inherited.</td>							</tr>							<tr class="play">								<td class="no_border"></td>								<td>delay</td>								<td>0</td>								<td>Number</td>								<td>Additional delay in milliseconds before the carousel starts scrolling.<br />									<em>Hint:</em> This can also be a negative number.</td>							</tr>							<tr class="play">								<td class="no_border"></td>								<td>resumeStopped</td>								<td>false</td>								<td>Boolean</td>								<td>If set to <code>true</code>, the timeout between transitions of a stopped carousel will restart.</td>							</tr><?php	sortParams('play');?>							<tr class="play no_border">								<td colspan="5">)</td>							</tr>							<!-- /pay -->							<tr class="new_item">								<td><a href="#pause" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">pause <span class="params">( immediate, resume )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will pause the timeout between transitions<br />									(only applies when the carousel scrolls automatically).</td>							</tr>							<tr id="pause" class="pause no_border">								<td colspan="5">(</td>							</tr>							<tr class="pause no_border">								<td></td>								<td>immediate</td>								<td>false</td>								<td>Boolean</td>								<td>If set to <code>true</code>, the carousel will immediately stop scrolling.</td>							</tr>							<tr class="pause">								<td class="no_border"></td>								<td>resume</td>								<td>false</td>								<td>Boolean</td>								<td>If set to <code>true</code>, the timeout will <em>resume</em> instead of <em>restart</em>.</td>							</tr>							<tr class="pause no_border">								<td colspan="5">)</td>							</tr>							<!-- /pause -->							<tr class="new_item">								<td><a href="#stop" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">stop <span class="params">( immediate )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will stop the carousel from scrolling.<br />									A stopped carousel can only be restarted by triggering the <code>play</code>-event with <code>true</code> as a parameter.</td>							</tr>							<tr id="stop" class="stop no_border">								<td colspan="5">(</td>							</tr>							<tr class="stop no_border">								<td></td>								<td>immediate</td>								<td>false</td>								<td>Boolean</td>								<td>If set to <code>true</code>, the carousel will immediately stop scrolling.</td>							</tr>							<tr class="stop no_border">								<td colspan="5">)</td>							</tr>							<!-- /stop -->							<tr class="new_item">								<td></td>								<td colspan="2">finish</td>								<td></td>								<td>Triggering this event will immediately finish the transition,<br />									triggering all callback-functions.</td>							</tr>							<!-- /finish -->							<tr class="new_item">								<td></td>								<td colspan="2">resume</td>								<td></td>								<td>Triggering this event will immediately resume the transition.</td>							</tr>							<!-- /resume -->							<tr class="new_item">								<td><a href="#prev" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">prev <span class="params">( options, items, onAfter, queue )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will scroll the carousel backward.</td>							</tr>							<tr id="prev" class="prev no_border">								<td colspan="5">(</td>							</tr>							<tr class="prev no_border">								<td></td>								<td>options</td>								<td>null</td>								<td>Object</td>								<td>A map of the configuration used for the scrolling (similar to the <code>prev</code> object passed in the configuration).<br />									What is not specified in this object, will be inherited from the configuration <code>prev</code> object.</td>							</tr>							<tr class="prev">								<td class="no_border"></td>								<td>items</td>								<td>null</td>								<td>Number</td>								<td>The number of items to scroll.<br />									If <code>null</code>, the value for <code>items</code> in the <code>options</code> object is used.</td>							</tr>							<tr class="prev">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called <strong>right after</strong> the carousel finished scrolling.<br />									See the description for <code>scroll.onAfter</code> on the configuration-page.<br />									If <code>null</code>, the value for <code>onAfter</code> in the <code>options</code> object is used.</td>							</tr>							<tr class="prev">								<td class="no_border"></td>								<td>queue</td>								<td>null</td>								<td>Boolean</td>								<td>Determines whether the scrolling should be queued if the carousel is currently being animated.<br />									If <code>null</code>, the value for <code>queue</code> in the <code>options</code> object is used.</td>							</tr><?php	sortParams('prev');?>							<tr class="prev no_border">								<td colspan="5">)</td>							</tr>							<!-- /prev -->							<tr class="new_item">								<td><a href="#next" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">next <span class="params">( options, items, onAfter, queue )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will scroll the carousel forward.</td>							</tr>							<tr id="next" class="next no_border">								<td colspan="5">(</td>							</tr>							<tr class="next no_border">								<td></td>								<td>options</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>options</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="next">								<td class="no_border"></td>								<td>items</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>items</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="next">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>onAfter</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="next">								<td class="no_border"></td>								<td>queue</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>queue</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr><?php	sortParams('next');?>							<tr class="next no_border">								<td colspan="5">)</td>							</tr>							<!-- /next -->							<tr class="new_item">								<td><a href="#slideto" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">slideTo <span class="params">( destination, deviation, origOrder, options, onAfter, direction )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will scroll the carousel to the designated item.</td>							</tr>							<tr id="slideto" class="slideto no_border">								<td colspan="5">(</td>							</tr>							<tr class="slideto no_border">								<td></td>								<td>destination <small>(required)</small></td>								<td>null</td>								<td>Number</td>								<td>The nth item to where the carousel should scroll.</td>							</tr>							<tr class="slideto">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>A jQuery-selector of the item to where the carousel should scroll.<br />									<em>For example:</em> <code>&quot;#foo li:first&quot;</code>.</td>							</tr>							<tr class="slideto">								<td class="no_border" colspan="3"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the item to where the carousel should scroll.<br />									<em>For example:</em> <code>$(&quot;#foo li:first&quot;)</code>.</td>							</tr>							<tr class="slideto">								<td class="no_border"></td>								<td>deviation</td>								<td>0</td>								<td>Number</td>								<td>Deviation of the <code>destination</code>.<br />									<em>For example:</em> <code>-2</code> makes the carousel not end at <code>destination</code>, but 2 items to the left of it.</td>							</tr>							<tr class="slideto">								<td class="no_border"></td>								<td>origOrder</td>								<td>null</td>								<td>Boolean</td>								<td>Determines if the position of <code>destination</code> is relative to the <em>original</em> order of the items (true) or to the <em>current</em> order of the items (false).<br />									If <code>null</code>, the value is determined by the given value for <code>destination</code>.</td>							</tr>							<tr class="slideto">								<td class="no_border"></td>								<td>options</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>options</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="slideto">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>onAfter</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="slideto">								<td class="no_border"></td>								<td>direction</td>								<td>null</td>								<td>String</td>								<td>The direction to scroll the carousel. <em>Possible values:</em> <code>&quot;prev&quot;</code> or <code>&quot;next&quot;</code>.<br />									If <code>null</code>, the carousel will choose the shortest route.</td>							</tr><?php	sortParams('slideto');?>							<tr class="slideto no_border">								<td colspan="5">)</td>							</tr>							<!-- /slideto -->							<tr class="new_item">								<td><a href="#prevpage" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">prevPage <span class="params">( options, onAfter )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will scroll the carousel one page backward.</td>							</tr>							<tr id="prevpage" class="prevpage no_border">								<td colspan="5">(</td>							</tr>							<tr class="prevpage no_border">								<td></td>								<td>options</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>options</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="prevpage">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>onAfter</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr><?php	sortParams('prevpage');?>							<tr class="prevpage no_border">								<td colspan="5">)</td>							</tr>							<!-- /prevPage -->							<tr class="new_item">								<td><a href="#nextpage" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">nextPage <span class="params">( options, onAfter )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will scroll the carousel one page forward.</td>							</tr>							<tr id="nextpage" class="nextpage no_border">								<td colspan="5">(</td>							</tr>							<tr class="nextpage no_border">								<td></td>								<td>options</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>options</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="nextpage">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>onAfter</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr><?php	sortParams('nextpage');?>							<tr class="nextpage no_border">								<td colspan="5">)</td>							</tr>							<!-- /nextPage -->							<tr class="new_item">								<td><a href="#slidetopage" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">slideToPage <span class="params">( page, options, onAfter )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will scroll the carousel to the passed page.</td>							</tr>							<tr id="slidetopage" class="slidetopage no_border">								<td colspan="5">(</td>							</tr>							<tr class="slidetopage no_border">								<td></td>								<td>page</td>								<td>null</td>								<td></td>								<td>The page to scroll to.<br />									If <code>null</code>, the carousel will scroll to the first item of the current page.</td>							</tr>							<tr class="slidetopage">								<td class="no_border"></td>								<td>options</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>options</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr>							<tr class="slidetopage">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td></td>								<td><em>See the description for the <code>onAfter</code>-parameter in the <code>prev</code>-custom event.</em></td>							</tr><?php	sortParams('slidetopage');?>							<tr class="slidetopage no_border">								<td colspan="5">)</td>							</tr>							<!-- /slideToPage -->							<tr class="new_item">								<td><a href="#queue" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">queue <span class="params">( direction / scrolls / fn, options )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will add a scroll in the queue to be executed after the next natural scroll.<br />									<em>Note:</em> The queue is only processed if the <code>scroll.queue</code> option is set to <code>true</code>.</td>							</tr>							<tr id="queue" class="queue no_border">								<td colspan="5">(</td>							</tr>							<tr class="queue no_border">								<td></td>								<td>direction / scrolls / fn</td>								<td>null</td>								<td>String</td>								<td>The direction to scroll the carousel. <em>Possible values:</em> <code>&quot;prev&quot;</code> or <code>&quot;next&quot;</code>.</td>							</tr>							<tr class="queue">								<td class="no_border" colspan="3"></td>								<td>Array</td>								<td>The queue of scrolls to set, removing all previously added scrolls.</td>							</tr>							<tr class="queue">								<td colspan="3" class="no_border"></td>								<td>Function</td>								<td>Callback-function to <em>get</em> the queue.<br />									This function receives 1 parameter:									<ul>										<li><span>queue:</span> the queue.</li>									</ul>								</td>							</tr>							<tr class="queue">								<td class="no_border"></td>								<td>options</td>								<td>null</td>								<td>Array</td>								<td>An array containing the options to pass to the <code>prev</code> or <code>next</code> event (<code>options</code>, <code>items</code> and <code>onAfter</code>).</td>							</tr>							<tr class="queue no_border">								<td colspan="5">)</td>							</tr>							<!-- /queue -->							<tr class="new_item">								<td><a href="#insertitem" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">insertItem <span class="params">( items, destination, origOrder, deviation )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will insert item(s) into the carousel.</td>							</tr>							<tr id="insertitem" class="insertitem no_border">								<td colspan="5">(</td>							</tr>							<tr class="insertitem no_border">								<td></td>								<td>items <small>(required)</small></td>								<td>null</td>								<td>String</td>								<td>A string of HTML to insert into the carousel.<br />									<em>For example:</em> <code>&quot;&lt;li&gt;X&lt;/li&gt;&quot;</code></td>							</tr>							<tr class="insertitem">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>A jQuery-selector of the item(s) to insert into the carousel.<br />									<em>For example:</em> <code>&quot;#foo li:first&quot;</code></td>							</tr>							<tr class="insertitem">								<td class="no_border" colspan="3"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the item(s) to insert into the carousel.<br />									<em>For example:</em> <code>$(&quot;#foo li:first&quot;)</code></td>							</tr>							<tr class="insertitem">								<td class="no_border"></td>								<td>destination</td>								<td>&quot;end&quot;</td>								<td>String</td>								<td>The position where to insert the new item(s).</td>							</tr>							<tr class="insertitem">								<td class="no_border" colspan="3"></td>								<td>Number</td>								<td>The nth item where to insert the new item(s).</td>							</tr>							<tr class="insertitem">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>A jQuery-selector of the item where to insert the new item(s).<br />									<em>For example:</em> <code>&quot;#foo li:first&quot;</code></td>							</tr>							<tr class="insertitem">								<td class="no_border" colspan="3"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the item where to insert the new item(s).<br />									<em>For example:</em> <code>$(&quot;#foo li:first&quot;)</code></td>							</tr>							<tr class="insertitem">								<td class="no_border"></td>								<td>origOrder</td>								<td>null</td>								<td>Boolean</td>								<td>Determines if the position of <code>destination</code> is relative to the <em>original</em> order of the items (true) or to the <em>current</em> order of the items (false).<br />									If <code>null</code>, the value is determined by the given value for <code>destination</code>.</td>							</tr>							<tr class="insertitem">								<td class="no_border"></td>								<td>deviation</td>								<td>0</td>								<td>Number</td>								<td>Deviation of the <code>destination</code>.<br />									<em>For example:</em> <code>-2</code> inserts the new item(s) not at <code>destination</code>, but 2 items to the left of it.</td>							</tr><?php	sortParams('insertitem');?>							<tr class="insertitem no_border">								<td colspan="5">)</td>							</tr>							<!-- /insertitem -->							<tr class="new_item">								<td><a href="#removeitem" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">removeItem <span class="params">( items, origOrder, deviation )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will remove an item from the carousel.</td>							</tr>							<tr id="removeitem" class="removeitem no_border">								<td colspan="5">(</td>							</tr>							<tr class="removeitem no_border">								<td></td>								<td>items <small>(required)</small></td>								<td>0</td>								<td>Number</td>								<td>The nth item to be removed.</td>							</tr>							<tr class="removeitem">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>A jQuery-selector of the item(s) to be removed.<br />									<em>For example:</em> <code>&quot;#foo li:first&quot;</code></td>							</tr>							<tr class="removeitem">								<td class="no_border" colspan="3"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the item(s) to be removed.<br />									<em>For example:</em> <code>$(&quot;#foo li:first&quot;)</code></td>							</tr>							<tr class="removeitem">								<td class="no_border"></td>								<td>origOrder</td>								<td>null</td>								<td>Boolean</td>								<td>Determines if the position of <code>items</code> is relative to the <em>original</em> order of the items (true) or to the <em>current</em> order of the items (false).<br />									If <code>null</code>, the value is determined by the given value for <code>items</code>.</td>							</tr>							<tr class="removeitem">								<td class="no_border"></td>								<td>deviation</td>								<td>0</td>								<td>Number</td>								<td>Deviation of the <code>items</code>.<br />									<em>For example:</em> <code>-2</code> doesn't remove the item at <code>items</code>, but the one that is two items to the left of it.</td>							</tr><?php	sortParams('removeitem');?>							<tr class="removeitem no_border">								<td colspan="5">)</td>							</tr>							<!-- /removeitem -->							<tr class="new_item">								<td><a href="#onbefore" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">onBefore <span class="params">( callback / callbacks )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to add a new function to the next <code>onBefore</code>-callback.</td>							</tr>							<tr id="onbefore" class="onbefore no_border">								<td colspan="5">(</td>							</tr>							<tr class="onbefore no_border">								<td></td>								<td>callback / callbacks</td>								<td>null</td>								<td>Function</td>								<td>Function to add to the callback.<br />									This function receives 4 parameters:									<ul>										<li><span>oldItems:</span> a jQuery-object of the items that were visible before scrolling.</li>										<li><span>newItems:</span> a jQuery-object of the items that are visible after scrolling.</li>										<li><span>newSizes:</span> a map of the new sizes of the carousel:<br />											<span>&nbsp;</span><code>newSizes.width</code> and <code>newSizes.height</code></li>										<li><span>duration:</span> the duration of the transition.</li>									</ul>								</td>							</tr>							<tr class="onbefore">								<td colspan="3" class="no_border"></td>								<td>Array</td>								<td>An array of functions to add, removing all previously added callback functions.</td>							</tr>							<tr class="onbefore no_border">								<td colspan="5">)</td>							</tr>							<!-- /onbefore -->							<tr class="new_item">								<td><a href="#onafter" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">onAfter <span class="params">( callback / callbacks )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to add a new function to the next <code>onAfter</code>-callback.</td>							</tr>							<tr id="onafter" class="onbefore no_border">								<td colspan="5">(</td>							</tr>							<tr class="onafter no_border">								<td></td>								<td>callback / callbacks</td>								<td>null</td>								<td>Function</td>								<td>Function to add to the callback.<br />									<em>See the description for the <code>onAfter</code>-parameter in the <code>prev</code>-custom event.</em>								</td>							</tr>							<tr class="onafter">								<td colspan="3" class="no_border"></td>								<td>Array</td>								<td>An array of functions to add, removing all previously added callback functions.</td>							</tr>							<tr class="onafter no_border">								<td colspan="5">)</td>							</tr>							<!-- /onafter -->							<tr class="new_item">								<td><a href="#configuration" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">configuration <span class="params">( option / options, value / fn, reInit )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to dynamically <em>get</em> or <em>set</em> a configuration option.</td>							</tr>							<tr id="configuration" class="configuration no_border">								<td colspan="5">(</td>							</tr>							<tr class="configuration no_border">								<td></td>								<td>option / options</td>								<td>null</td>								<td>String</td>								<td>The option to <em>set</em> (if the second parameter is a value) or <em>get</em> (is the second parameter is a function).</td>							</tr>							<tr class="configuration">								<td colspan="3" class="no_border"></td>								<td>Object</td>								<td>A map of the options to <em>set</em>.</td>							</tr>							<tr class="configuration">								<td class="no_border"></td>								<td>value / fn</td>								<td>null</td>								<td>String</td>								<td>The value to <em>set</em> for the <code>option</code>.</td>							</tr>							<tr class="configuration">								<td colspan="3" class="no_border"></td>								<td>Function</td>								<td>Callback-function to <em>get</em> the value for the <code>option</code>.<br />									This function receives 1 parameter:									<ul>										<li><span>value:</span> the value for the <code>option</code>.</li>									</ul>									<p><em>Note:</em> If the callback-function is the first parameter, <code>value</code> will be the entire configuration object.</p>								</td>							</tr>							<tr class="configuration">								<td class="no_border"></td>								<td>reInit</td>								<td>true</td>								<td>Boolean</td>								<td>Determines if the carousel should &quot;re-init&quot; (re-callculate sizes etc.).</td>							</tr>							<tr class="configuration no_border">								<td colspan="5">)</td>							</tr>							<!-- /configuration -->							<tr class="new_item">								<td><a href="#synchronise" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">synchronise <span class="params">( options )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to synchronise the given carousels.</td>							</tr>							<tr id="synchronise" class="synchronise no_border">								<td colspan="5">(</td>							</tr>							<tr class="synchronise no_border">								<td></td>								<td>options</td>								<td>null</td>								<td></td>								<td>Any valid value for the <code>synchronise</code> option in the configuration.<br />									If <code>null</code>, the value for <code>synchronise</code> in the configuration is used.</td>							</tr>							<tr class="synchronise no_border">								<td colspan="5">)</td>							</tr>							<!-- /synchronise -->							<tr class="new_item">								<td><a href="#linkanchors" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">linkAnchors <span class="params">( container, selector )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to automatically bind the <code>slideTo</code>-event to any HTML-element that links to an item inside the carousel.<br />									<em>Note:</em> This method is executed on every <code>&lt;a class=&quot;caroufredsel&quot;&gt;</code>-tag after creating the carousel and after calling the <code>insertItem</code> and <code>removeItem</code> custom events by default.</td>							</tr>							<tr id="linkanchors" class="linkanchors no_border">								<td colspan="5">(</td>							</tr>							<tr class="linkanchors no_border">								<td></td>								<td>container</td>								<td>&quot;body&quot;</td>								<td>String</td>								<td>A jQuery-selector of the HTML-element to search in.</td>							</tr>							<tr class="linkanchors">								<td class="no_border"></td>								<td>selector</td>								<td>&quot;a.caroufredsel&quot;</td>								<td>String</td>								<td>A jQuery-selector of the HTML-element to search for.<br />									<em>For example:</em> <code>&quot;a.cfs_link&quot;</code> will search for <code>&lt;a class=&quot;cfs_link&quot;&gt;</code>-tags.</td>							</tr>							<tr class="linkanchors no_border">								<td colspan="5">)</td>							</tr>							<!-- /linkanchors -->														<tr class="new_item">								<td></td>								<td colspan="2">updateSizes</td>								<td></td>								<td>Trigger this event to immediately set the correct sizes to the carousel.</td>							</tr>							<!-- /updatesizes -->							<tr class="new_item">								<td><a href="#currentposition" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">currentPosition <span class="params">( fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will return the position of the first visible item (the current position) in the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.</td>							</tr>							<tr id="currentposition" class="currentposition no_border">								<td colspan="5">(</td>							</tr>							<tr class="currentposition no_border">								<td></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to get the current position.<br />									This function receives 1 parameter:									<ul>										<li><span>position:</span> the current position of the carousel.</li>									</ul>								</td>							</tr>							<tr class="currentposition no_border">								<td colspan="5">)</td>							</tr>							<!-- /currentposition -->														<tr class="new_item">								<td><a href="#currentpage" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">currentPage <span class="params">( fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will return the current page number in the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.</td>							</tr>							<tr id="currentpage" class="currentpage no_border">								<td colspan="5">(</td>							</tr>							<tr class="currentpage no_border">								<td></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to get the current page number.<br />									This function receives 1 parameter:									<ul>										<li><span>page:</span> the current page of the carousel.</li>									</ul>								</td>							</tr>							<tr class="currentpage no_border">								<td colspan="5">)</td>							</tr>							<!-- /currentpage -->														<tr class="new_item">								<td><a href="#currentvisible" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">currentVisible <span class="params">( fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will return a jQuery-object of the current visible items in the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.</td>							</tr>							<tr id="currentvisible" class="currentvisible no_border">								<td colspan="5">(</td>							</tr>							<tr class="currentvisible no_border">								<td></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to get the current visible items.<br />									This function receives 1 parameter:									<ul>										<li><span>items:</span> the current visible items in the carousel.</li>									</ul>								</td>							</tr>							<tr class="currentvisible no_border">								<td colspan="5">)</td>							</tr>							<!-- /currentvisible -->														<tr class="new_item">								<td><a href="#slice" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">slice <span class="params">( start, end, fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Triggering this event will return a jQuery-object of the matching elements in the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.<br />									It's behavior is the same as <a href="http://api.jquery.com/slice/" target="_blank">jQueries slice-method</a> if the order of the items would not have been changed by the plugin.</td>							</tr>							<tr id="slice" class="slice no_border">								<td colspan="5">(</td>							</tr>							<tr class="slice no_border">								<td></td>								<td>start</td>								<td>0</td>								<td>Number</td>								<td>The 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.</td>							</tr>							<tr class="slice">								<td class="no_border"></td>								<td>end</td>								<td>null</td>								<td>Number</td>								<td>The 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set.<br />									If <code>null</code>, the range continues until the end of the set.</td>							</tr>							<tr class="slice">								<td class="no_border"></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to get the current visible items.<br />									This function receives 1 parameter:									<ul>										<li><span>items:</span> the selected items.</li>									</ul>								</td>							</tr>							<tr class="slice no_border">								<td colspan="5">)</td>							</tr>							<!-- /slice -->							<tr class="new_item">								<td><a href="#isscrolling" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">isScrolling <span class="params">( fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to find out whether the carousel is scrolling using either the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.</td>							</tr>							<tr id="isscrolling" class="isscrolling no_border">								<td colspan="5">(</td>							</tr>							<tr class="isscrolling no_border">								<td></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to find out whether the carousel is scrolling.<br />									This function receives 1 parameter:									<ul>										<li><span>isScrolling:</span> <code>true</code> or <code>false</code>.</li>									</ul>								</td>							</tr>							<tr class="isscrolling no_border">								<td colspan="5">)</td>							</tr>							<!-- /isscrolling -->							<tr class="new_item">								<td><a href="#ispaused" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">isPaused <span class="params">( fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to find out whether the carousel is paused using either the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.</td>							</tr>							<tr id="ispaused" class="ispaused no_border">								<td colspan="5">(</td>							</tr>							<tr class="ispaused no_border">								<td></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to find out whether the carousel is paused.<br />									This function receives 1 parameter:									<ul>										<li><span>isPaused:</span> <code>true</code> or <code>false</code>.</li>									</ul>								</td>							</tr>							<tr class="ispaused no_border">								<td colspan="5">)</td>							</tr>							<!-- /ispaused -->							<tr class="new_item">								<td><a href="#isstopped" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">isStopped <span class="params">( fn )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Trigger this event to find out whether the carousel is stopped using either the callback-function or (when calling the <code>triggerHandler</code>-method) the return value.</td>							</tr>							<tr id="isstopped" class="isstopped no_border">								<td colspan="5">(</td>							</tr>							<tr class="isstopped no_border">								<td></td>								<td>fn</td>								<td>null</td>								<td>Function</td>								<td>Callback-function to find out whether the carousel is stopped.<br />									This function receives 1 parameter:									<ul>										<li><span>isStopped:</span> <code>true</code> or <code>false</code>.</li>									</ul>								</td>							</tr>							<tr class="isstopped no_border">								<td colspan="5">)</td>							</tr>							<!-- /isstopped -->							<tr class="new_item">								<td><a href="#destroy" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">destroy <span class="params">( origOrder )</span><?php echo $paramtxt; ?></td>								<td></td>								<td>Remove the carousel functionality completely.<br />									This will return the element back to its pre-init state.</td>							</tr>							<tr id="destroy" class="destroy no_border">								<td colspan="5">(</td>							</tr>							<tr class="destroy no_border">								<td></td>								<td>origOrder</td>								<td>false</td>								<td>Boolean</td>								<td>Determines if the items should be put back in the <em>original order</em> (true) or stay in the <em>current order</em> (false).</td>							</tr>							<tr class="destroy no_border">								<td colspan="5">)</td>							</tr>							<!-- /destroy -->						</tbody>					</table>				</div> <!-- /table -->				<p><em>Note:</em> In all callback-functions, <code>this</code> refers to the HTML-element of the carousel.<br />					<em>Note:</em> Using the <code>triggerHandler</code>-method will return the value passed in the callback-function.</p>				<br />				<br />				<h3>How to use the custom events</h3>				<p>To trigger any of these custom events, use the <code>trigger</code> function which already is available for every jQuery-object.<br />					For example, this code will scroll the carousel forward one item at a time when clicking a button.</p><pre class="brush: jscript;">$(document).ready(function() {	$(&quot;#foo&quot;).carouFredSel({		auto: false	});	$(&quot;#button&quot;).click(function() {		$(&quot;#foo&quot;).trigger(&quot;next&quot;, 1);	});});</pre>				<br />				<p>Have a look at the <a href="code-examples/custom-events.php">custom event code examples page</a> for more detailed information on how to use the custom events.<br />					Working examples of the custom events can be found on <a href="examples/custom-events.php">this examples page</a>.</p>				<p>More on how to use the <code>trigger</code> method in general <a target="_blank" href="http://api.jquery.com/trigger/">can be found here</a> and more on the <code>triggerHandler</code> method <a target="_blank" href="http://api.jquery.com/triggerHandler/">over here</a>.</p><?php	$help_feedback = true;	include_once 'functies/layout_post.php';?>