<?phpfunction object_config($prefix = 'auto_') {		$str = '';	if ($prefix == 'pagination_') {		$str .= '								<tr class="'.$prefix.'object">									<td class="no_border"></td>									<td>items</td>									<td>[items.visible]</td>									<td></td>									<td>The number of items per page.</td>								</tr>								<tr class="'.$prefix.'object">									<td class="no_border"></td>									<td>deviation</td>									<td>0</td>									<td></td>									<td>The number to deviate the selected bullet.</td>								</tr>';	} else {		$str .= object_config_tr('items', $prefix);	}		$str .= object_config_tr('fx', $prefix).				object_config_tr('easing',  $prefix).				object_config_tr('duration', $prefix);			if ($prefix != 'auto_') {		$scrollto = ($prefix == 'pagination_') ? '' : ' This could be desirable when using the <code>slideTo</code> event.';		$str .= '								<tr class="'.$prefix.'object">									<td colspan="3" class="no_border"></td>									<td>String</td>									<td>Enter <code>&quot;auto&quot;</code> to let the plugin calculate a <em>speed</em> for the transition instead of using a <em>duration</em>.'.$scrollto.'										<p><em>Note:</em> The speed is calculated by deviding <code>scroll.duration</code> by <code>scroll.items</code> and multiplying it with the amount of items to scroll.</p>									</td>								</tr>';	}		$str .=	object_config_tr('pauseOnHover', $prefix);	if ($prefix == 'auto_') {		$str .= '								<tr class="'.$prefix.'object">									<td class="no_border"></td>									<td>pauseOnEvent</td>									<td>false</td>									<td>Boolean</td>									<td>Determines whether the timeout between transitions should be paused when the event on the button is triggered.<br />										See the description for <code>scroll.pauseOnHover</code>.</td>								</tr>								<tr class="'.$prefix.'object">									<td class="no_border"></td>									<td>pauseOnResize</td>									<td>true</td>									<td>Boolean</td>									<td>Determines whether the timeout between transitions should be paused when resizing the window.<br />										<em>Note:</em> Only applies on responsive carousels.</td>								</tr>';	}		$str .=	object_config_tr('queue', $prefix);	if ($prefix != 'swipe_' && $prefix != 'mousewheel_') {		$str .=	object_config_tr('event', $prefix);	}				$str .=	object_config_tr('conditions', $prefix).				object_config_tr('onBefore', $prefix).				object_config_tr('onAfter', $prefix).				object_config_tr('onEnd', $prefix);	return $str;}function object_config_tr($item, $prefix = 'auto_') {	return '							<tr class="'.$prefix.'object">								<td class="no_border"></td>								<td>'.$item.'</td>								<td>[scroll.'.$item.']</td>								<td></td>								<td><em>See the description for <code>scroll.'.$item.'</code>.</em></td>							</tr>';}	$description = 'carouFredSel configuration. How to customize your carousel: a guide through all the options for the carouFredSel plugin.';	$keywords = 'configurate, configuration, options, settings, values, customize, customizing, carousel, jquery';	$title = 'Configuration';	$links = '		<link rel="stylesheet" type="text/css" media="all" href="css/table.css" />';	$scripts = '		<script type="text/javascript" language="javascript" src="js/table.js"></script>';	$paramtxt = '<br />									<small>Click to <span style="display: none;">show</span><span>hide</span> the options for this object.</small>';	include_once 'functies/layout_pre.php';?>				<h1>Configuration</h1>				<div class="robot_container">					<div style="width: 425px;">						<p>The carouFredSel-plugin provides a lot of options for customizing your carousel. Luckily for you, all options are OPTIONAL...<br />							The default option values can be overridden by passing new values to the method or by redefining the default option values.</p>						<p>The following options are provided by the plugin. Really sweet customized carousels can be created by using these options. Have a look at the <a href="code-examples/configuration.php">configuration code examples page</a> to see just how.</p>					</div><?php	echo $config_robot_button;?>				</div> <!-- /robot_container -->				<div class="warning">					<p><strong>Please note:</strong><br />						As of version 6.0.0, the <code>onBefore</code>, <code>onAfter</code> and <code>onCreate</code>-callback functions receive only one parameter: a map of all data.<br />						Also some options and callback functions became deprecated.</p>				</div>				<div class="table transparent p1">					<table cellpadding="0" cellspacing="0" border="0" width="930">						<col width="30" />						<col width="130" />						<col width="180" />						<col width="100" />						<thead>							<tr>								<td></td>								<td>Option</td>								<td>Default value</td>								<td>Datatype</td>								<td>Description</td>							</tr>						</thead>						<tbody>							<tr class="new_item">								<td></td>								<td>circular</td>								<td>true</td>								<td>Boolean</td>								<td>Determines whether the carousel should be <em>circular</em>.</td>							</tr>							<tr class="new_item">								<td></td>								<td>infinite</td>								<td>true</td>								<td>Boolean</td>								<td>Determines whether the carousel should be <em>infinite</em>.<br />									<em>Note:</em> It is possible to create a non-circular, infinite carousel, but it is not possible to create a circular, non-infinite carousel.</td>							</tr>							<tr class="new_item">								<td></td>								<td>responsive</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the carousel should be <em>responsive</em>.<br />									If <code>true</code>, the items will be resized to fill the carousel.</td>							</tr>							<tr class="new_item">								<td></td>								<td>direction</td>								<td>&quot;left&quot;</td>								<td>String</td>								<td>The direction to scroll the carousel, determines whether the carousel scrolls horizontal or vertical and -when the carousel scrolls automatically- in what direction.<br />									<em>Possible values:</em> <code>&quot;right&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;up&quot;</code> or <code>&quot;down&quot;</code>.</td>							</tr>							<tr class="new_item">								<td></td>								<td>width</td>								<td>null</td>								<td>Number</td>								<td>The width of the carousel.<br />									If <code>null</code>, the width will be calculated (and set to <code>&quot;variable&quot;</code> if necessary, depending on the item-widths).</td>							</tr>							<tr>								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter <code>&quot;variable&quot;</code> to automatically resize the carousel when scrolling items with variable widths.</td>							</tr>							<tr>								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter <code>&quot;auto&quot;</code> to measure the widest item.</td>							</tr>							<tr>								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter a percentage to automatically resize (and re-configurate) the carousel onWindowResize.<br />									<em>Note:</em> Only applies on horizontal carousels.<br />									<em>For example:</em> <code>&quot;100%&quot;</code>.</td>							</tr>							<tr class="new_item">								<td></td>								<td>height</td>								<td>null</td>								<td>Number</td>								<td>The height of the carousel.<br />									If <code>null</code>, the height will be calculated (and set to <code>&quot;variable&quot;</code> if necessary, depending on the item-heights).</td>							</tr>							<tr>								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter <code>&quot;variable&quot;</code> to automatically resize the carousel when scrolling items with variable heights.</td>							</tr>							<tr>								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter <code>&quot;auto&quot;</code> to measure the highest item.</td>							</tr>							<tr>								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter a percentage to automatically resize (and re-configurate) the carousel onWindowResize.<br />									<em>Note:</em> Only applies on vertical carousels.<br />									<em>For example:</em> <code>&quot;100%&quot;</code>.</td>							</tr>							<tr class="new_item">								<td></td>								<td>align</td>								<td>&quot;center&quot;</td>								<td>String</td>								<td>Whether and how to align the items inside a fixed width/height.<br />									<em>Possible values:</em> <code>&quot;center&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code> or <code>false</code>.</td>							</tr>							<tr class="new_item">								<td></td>								<td>padding</td>								<td>null</td>								<td>Number</td>								<td>Padding around the carousel (top, right, bottom and left).</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Array</td>								<td>Padding in an Array.<br />									<em>For example:</em> <code>[10, 20, 30, 40]</code> (top, right, bottom, left)<br />									or <code>[0, 50]</code> (top/bottom, left/right).</td>							</tr>							<tr class="new_item">								<td></td>								<td>synchronise</td>								<td>null</td>								<td>String</td>								<td>Selector for the carousel to synchronise.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Array</td>								<td>Selector and options for the carousel to synchronise:<br />									[<em>string</em> selector, <em>boolean</em> inheritOptions, <em>boolean</em> sameDirection, <em>number</em> deviation]									<em>For example:</em> <code>[&quot;#foo2&quot;, true, true, 0]</code></td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Array</td>								<td>A collection of arrays.</td>							</tr>							<tr class="new_item">								<td></td>								<td>cookie</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the carousel should start at its last viewed position.<br />									The cookie is stored until the browser is closed.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>A specific name for the cookie to prevent multiple carousels from using the same cookie.</td>							</tr>							<tr class="new_item">								<td></td>								<td>onCreate</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called after the carousel has been created.<br />									This function receives a map of all data:</td>							</tr>							<tr class="no_border">								<td colspan="2"></td>								<td colspan="3"><pre class="brush: jscript;">data = {	'width', 		// The new width for the carousel.	'height', 		// The new height for the carousel.	'items'			// A jQuery-object of the visible items.};</pre><br />								</td>							</tr>							<tr class="new_item">								<td><a href="#items_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">items<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration for the items: <code>visible</code>, <code>minimum</code>, <code>start</code>, <code>width</code>, <code>height</code> and <code>filter</code>.</td>							</tr>							<tr id="items_object" class="items_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="items_object no_border">								<td></td>								<td>visible</td>								<td>null</td>								<td>Number</td>								<td>The number of visible items.<br />									If <code>null</code>, the number will be calculated (and set to <code>&quot;variable&quot;</code> if necessary).</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter <code>&quot;variable&quot;</code> to measure the number of visible items<br />									(based on the available size).</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>Object</td>								<td>A map for <code>min</code> and <code>max</code>.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>A string consisting of three sections:									<ul>										<li><span>base:</span><code>&quot;odd&quot;</code>, <code>&quot;even&quot;</code> or <code>&quot;&quot;</code>(an empty string, default).</li>										<li><span>adjustment:</span><code>&quot;+&quot;</code> or <code>&quot;-&quot;</code>.</li>										<li><span>amount:</span>any number (1 by default)</li>									</ul>									<em>For example:</em> <code>&quot;odd+2&quot;</code> will measure the number of items needed to fill the available size, decrease it to an odd number and increase it by two.								</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>Function</td>								<td>A function that returns the number of visible items.<br />									This function receives 1 parameter:									<ul>										<li><span>visibleItems:</span> the number of items that would fit the available size.</li>									</ul></td>							</tr>							<tr class="items_object">								<td></td>								<td>minimum</td>								<td>null</td>								<td>Number</td>								<td>The minimum number of items needed to create a carousel.<br />									If <code>null</code>, the number for <code>items.visible</code> is inherited and increased by 1.</td>							</tr>							<tr class="items_object">								<td></td>								<td>start</td>								<td>0</td>								<td>Number</td>								<td>The nth item to start the carousel.<br />									<em>Hint:</em> This can also be a negative number.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter <code>&quot;random&quot;</code> to let the plugin pick a randon item to start the carousel.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>A jQuery-selector of the item to start the carousel.<br />									<em>For example:</em> <code>&quot;#foo li:first&quot;</code>.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the item to start the carousel.<br />									<em>For example:</em> <code>$(&quot;#foo li:first&quot;)</code>.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>Boolean</td>								<td>If <code>true</code>, the plugin will search for an item-anchor to start the carousel using the url-hashtag.<br />									<em>For example:</em> http://domain.com#startitem</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>Array</td>								<td>An array of the options above in the order they should be tested for a valid value.</td>							</tr>							<tr class="items_object">								<td class="no_border"></td>								<td>width</td>								<td>null</td>								<td>Number</td>								<td>The width of the items.<br />									If <code>null</code>, the width will be measured (and set to <code>&quot;variable&quot;</code> if necessary).</td>							</tr>							<tr class="items_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;variable&quot;</code> to create a carousel that supports variable item-widths.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter a percentage to automatically resize the width of the items onWindowResize.<br />									<em>Note:</em> Only applies on responsive, vertical carousels.<br />									<em>For example:</em> <code>&quot;50%&quot;</code>.</td>							</tr>							<tr class="items_object">								<td class="no_border"></td>								<td>height</td>								<td>null</td>								<td>Number</td>								<td>The height of the items.<br />									If <code>null</code>, the height will be measured (and set to <code>&quot;variable&quot;</code> if necessary).</td>							</tr>							<tr class="items_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;variable&quot;</code> to create a carousel that supports variable item-heights.</td>							</tr>							<tr class="items_object">								<td class="no_border" colspan="3"></td>								<td>String</td>								<td>Enter a percentage to automatically resize the height of the items onWindowResize.<br />									<em>Note:</em> Only applies on responsive, horizontal carousels.<br />									<em>For example:</em> <code>&quot;50%&quot;</code>.</td>							</tr>							<tr class="items_object">								<td class="no_border"></td>								<td>filter</td>								<td>null</td>								<td>String</td>								<td>The selector elements should match to be considered an item.<br />									If <code>null</code>, all elements inside the carousel will be considered to be an item.<br />									If the carousel contains :hidden-elements, it is set to <code>&quot;:visible&quot;</code>.<br />									<em>Note:</em> this option is not (yet) compatible with non-circular carousels.</td>							</tr>							<tr class="items_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>items.visible</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;variable&quot;</code> for <code>items.width</code>, <code>items.height</code> and <code>items.visible</code>.</td>							</tr>							<!-- /items_object -->							<tr class="new_item">								<td><a href="#scroll_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">scroll<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for general scrolling: <code>items</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>queue</code>, <code>event</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code> and <code>onEnd</code>.</td>							</tr>							<tr id="scroll_object" class="scroll_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="scroll_object no_border">								<td></td>								<td>items</td>								<td>null</td>								<td>Number</td>								<td>The number of items to scroll.<br />									If <code>null</code>, the number of visible items is used.</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;page&quot;</code> to scroll to the first item of the previous/next &quot;page&quot;.</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>A string consisting of three sections:									<ul>										<li><span>base:</span><code>&quot;odd&quot;</code>, <code>&quot;even&quot;</code> or <code>&quot;&quot;</code>(an empty string, default).</li>										<li><span>adjustment:</span><code>&quot;+&quot;</code> or <code>&quot;-&quot;</code>.</li>										<li><span>amount:</span>any number (1 by default)</li>									</ul>									<em>For example:</em> <code>&quot;odd+2&quot;</code> will decrease the number of visible items to an odd number and increase it by two.								</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>fx</td>								<td>&quot;scroll&quot;</td>								<td>String</td>								<td>Indicates which effect to use for the transition.<br />									<em>Possible values:</em> <code>&quot;none&quot;</code>, <code>&quot;scroll&quot;</code>, <code>&quot;directscroll&quot;</code>, <code>&quot;fade&quot;</code>, <code>&quot;crossfade&quot;</code>, <code>&quot;cover&quot;</code>, <code>&quot;cover-fade&quot;</code>, <code>&quot;uncover&quot;</code> or <code>&quot;uncover-fade&quot;</code>.</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>easing</td>								<td>&quot;swing&quot;</td>								<td>String</td>								<td>Indicates which easing function to use for the transition. jQuery defaults: <code>&quot;linear&quot;</code> and <code>&quot;swing&quot;</code>, built in: <code>&quot;quadratic&quot;</code>, <code>&quot;cubic&quot;</code> and <code>&quot;elastic&quot;</code>.</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>duration</td>								<td>500</td>								<td>Number</td>								<td>Determines the duration of the transition in milliseconds.<br />									If less than <code>10</code>, the number is interpreted as a speed (pixels/millisecond).<br />									This is probably desirable when scrolling items with variable sizes.</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>pauseOnHover</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the timeout between transitions should be paused &quot;onMouseOver&quot; (only applies when the carousel scrolls automatically).</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;resume&quot;</code> to let the timeout <em>resume</em> instead of <em>restart</em> &quot;onMouseOut&quot;.</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;immediate&quot;</code> to immediately <em>stop</em> &quot;onMouseOver&quot; and <em>resume</em> &quot;onMouseOut&quot; a scrolling carousel.</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;immediate-resume&quot;</code> for both the options above.</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>queue</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the scrolling should be queued if the carousel is currently being animated.</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;first&quot;</code> to queue only the first scroll.</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Enter <code>&quot;last&quot;</code> to queue only the last scroll (all previous queued scroll will be removed).</td>							</tr>							<tr class="scroll_object">								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>Enter a numeric value to specify the amount of items to scroll.</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>event</td>								<td>&quot;click&quot;</td>								<td>String</td>								<td>The event to trigger the prev-, next- and pagination-buttons/bullets.</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>conditions</td>								<td>null</td>								<td>Function</td>								<td>Function that tests whether the carousel should start scrolling.<br />									If it doesn't return <code>true</code>, the carousel will not scroll.<br />									This function receives one parameter:</td>							</tr>							<tr class="scroll_object no_border">								<td colspan="2"></td>								<td colspan="3"><pre class="brush: jscript;">direction	//	The direction of the transition.</pre><br />								</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>onBefore</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called <strong>right before</strong> the carousel starts scrolling.<br />									This function receives a map of all data:</td>							</tr>							<tr class="scroll_object no_border">								<td colspan="2"></td>								<td colspan="3"><pre class="brush: jscript;">data = {	'width', 		// The new width for the carousel.	'height', 		// The new height for the carousel.	'items': {		'old', 			// A jQuery-object of the items that are visible before scrolling.		'skipped',		// A jQuery-object of the items between the old and new items.		'visible'		// A jQuery-object of the items that will be visible after scrolling.	},	'scroll': {		'items',		//	The number of items scrolled.		'direction',	//	The direction of the transition.		'duration'		//	The duration of the transition.	}};</pre><br />								</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>onAfter</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called <strong>right after</strong> the carousel finished scrolling.<br />									This function receives the same parameter as the <code>onBefore</code>-callback function.<br />								</td>							</tr>							<tr class="scroll_object">								<td class="no_border"></td>								<td>onEnd</td>								<td>null</td>								<td>Function</td>								<td>Function to call when a non-circular carousel reaches its start or end.<br />									This function receives one parameter:</td>							</tr>							<tr class="scroll_object no_border">								<td colspan="2"></td>								<td colspan="3"><pre class="brush: jscript;">direction	//	The direction of the transition.</pre>								</td>							</tr>							<tr class="scroll_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>scroll.items</code> or -if greater than 50- for <code>scroll.duration</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>A string for <code>scroll.easing</code>.</td>							</tr>							<!-- /scroll_object -->							<tr class="new_item">								<td><a href="#auto_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">auto<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for automatic scrolling: <code>play</code>, <code>button</code>, <code>timeoutDuration</code>, <code>delay</code>, <code>progress</code>, <code>items</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>pauseOnEvent</code>, <code>pauseOnResize</code>, <code>queue</code>, <code>event</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code>, <code>onEnd</code>, <code>onTimeoutStart</code>, <code>onTimeoutEnd</code> and <code>onTimeoutPause</code>.<br />									<p class="alert">This object is the same as the <code>scroll</code> object, except for <code>play</code>, <code>button</code>, <code>timeoutDuration</code>, <code>delay</code>, <code>progress</code>, <code>pauseOnEvent</code>, <code>pauseOnResize</code>, <code>onTimeoutStart</code>, <code>onTimeoutEnd</code> and <code>onTimeoutPause</code>. What is not specified in this object, will be inherited from the <code>scroll</code> object.</p>								</td>							</tr>							<tr id="auto_object" class="auto_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="auto_object no_border">								<td></td>								<td>play</td>								<td>true</td>								<td>Boolean</td>								<td>Determines whether the carousel should scroll automatically or not.</td>							</tr>							<tr class="auto_object no_border">								<td class="no_border"></td>								<td>button</td>								<td>null</td>								<td>String</td>								<td>A jQuery-selector for the HTML element that should toggle the carousel between playing and paused.</td>							</tr>							<tr class="auto_object">								<td colspan="3" class="no_border"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the HTML element that should toggle the carousel between playing and paused.</td>							</tr>							<tr class="auto_object">								<td colspan="3" class="no_border"></td>								<td>Function</td>								<td>A function that returns any of the other valid values.</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td>timeoutDuration</td>								<td>5 * [auto.duration]</td>								<td>Number</td>								<td>The amount of milliseconds the carousel will pause.<br />									If <code>auto.duration</code> is less then <code>10</code> -to use a speed (in pixels/milliseconds) instead of a duration-, the default value is <code>2500</code>.</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td>delay</td>								<td>0</td>								<td>Number</td>								<td>Additional delay in milliseconds before the carousel starts scrolling the first time.<br />									<em>Hint:</em> This can also be a negative number.</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td>progress</td>								<td>false</td>								<td>Object</td>								<td>A map for <code>bar</code>, <code>updater</code> and <code>interval</code>.</td>							</tr>							<tr class="auto_object no_border">								<td></td>								<td colspan="4">{</td>							</tr>							<tr class="auto_object no_border">								<td></td>								<td><span>&nbsp; &nbsp; &nbsp;</span>bar</td>								<td>null</td>								<td>String</td>								<td>A jQuery-selector for the HTML element that should be passed to the <code>updater</code>-callback function.</td>							</tr>							<tr class="auto_object">								<td colspan="3" class="no_border"></td>								<td>jQuery-object</td>								<td>A jQuery-object for the HTML element that should be passed to the <code>updater</code>-callback function.</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td><span>&nbsp; &nbsp; &nbsp;</span>updater</td>								<td>$.fn.carouFredSel.progressbarUpdater</td>								<td>Function</td>								<td>Function that will be called to update the progressbar.<br />									This function receives one parameter:</td>							</tr>							<tr class="auto_object no_border">								<td colspan="2"></td>								<td colspan="3"><pre class="brush: jscript;">percentage	//	A percentage of the time passed in the timeout (from 0 to 100).</pre><br />								</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td><span>&nbsp; &nbsp; &nbsp;</span>interval</td>								<td>50</td>								<td>Number</td>								<td>The amount of milliseconds the between triggering the <code>updater</code>-callback function.</td>							</tr>							<tr class="auto_object no_border">								<td></td>								<td colspan="4">}</td>							</tr>							<tr class="auto_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>A string for <code>auto.progress.bar</code>.</td>							</tr>							<tr class="auto_object">								<td colspan="3" class="no_border"></td>								<td>jQuery-object</td>								<td>A jQuery-object for <code>auto.progress.bar</code>.</td>							</tr>							<?php	echo object_config('auto_');?>							<tr class="auto_object">								<td class="no_border"></td>								<td>onTimeoutStart</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called when starting the pausing-timer.<br />									This function receives 2 parameters:									<ul>										<li><span>percentage:</span> The percentage the <code>auto.timeoutDuration</code> is at.</li>										<li><span>duration:</span> The remaining time left in milliseconds.</li>									</ul>								</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td>onTimeoutEnd</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called when ending the pausing-timer.<br />									Functionality is the same as for the <code>onTimeoutStart</code>-function.								</td>							</tr>							<tr class="auto_object">								<td class="no_border"></td>								<td>onTimeoutPause</td>								<td>null</td>								<td>Function</td>								<td>Function that will be called when pausing the pausing-timer.<br />									Functionality is the same as for the <code>onTimeoutStart</code>-function.								</td>							</tr>							<tr class="auto_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Boolean</td>								<td>True or false for <code>auto.play</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>auto.timeoutDuration</code>.</td>							</tr>							 <!-- /auto_object -->							<tr class="new_item">								<td><a href="#prev_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">prev<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for scrolling backwards using the &quot;previous&quot; button or key: <code>button</code>, <code>key</code>, <code>items</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>queue</code>, <code>event</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code> and <code>onEnd</code>.<br />									<p class="alert">This object is the same as the <code>scroll</code> object, except for <code>button</code> and <code>key</code>. What is not specified in this object, will be inherited from the <code>scroll</code> object.</p>								</td>							</tr>							<tr id="prev_object" class="prev_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="prev_object no_border">								<td class="no_border"></td>								<td>button</td>								<td>null</td>								<td>String</td>								<td>A jQuery-selector for the HTML element that should scroll the carousel backward.</td>							</tr>							<tr class="prev_object">								<td colspan="3" class="no_border"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the HTML element that should scroll the carousel backward.</td>							</tr>							<tr class="prev_object">								<td colspan="3" class="no_border"></td>								<td>Function</td>								<td>A function that returns any of the other valid values.</td>							</tr>							<tr class="prev_object">								<td class="no_border"></td>								<td>key</td>								<td>null</td>								<td>Number</td>								<td>The keyCode of the keyboard-key that should scroll the carousel backward.</td>							</tr>							<tr class="prev_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Can be: <code>&quot;up&quot;</code>, <code>&quot;down&quot;</code>, <code>&quot;left&quot;</code> or <code>&quot;right&quot;</code>.</td>							</tr><?php	echo object_config('prev_');?>							<tr class="prev_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Any valid string for <code>prev.button</code> or <code>prev.key</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>prev.key</code>.</td>							</tr>							 <!-- /prev_object -->							<tr class="new_item">								<td><a href="#next_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">next<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for scrolling forward using the &quot;next&quot; button or key: <code>button</code>, <code>key</code>, <code>items</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>queue</code>, <code>event</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code> and <code>onEnd</code>.<br />									<p class="alert">This object is the same as the <code>scroll</code> object, except for <code>button</code> and <code>key</code>. What is not specified in this object, will be inherited from the <code>scroll</code> object.</p>								</td>							</tr>							<tr id="next_object" class="next_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="next_object no_border">								<td></td>								<td>button</td>								<td>null</td>								<td>String</td>								<td>A jQuery-selector for the HTML element that should scroll the carousel forward.</td>							</tr>							<tr class="next_object">								<td colspan="3" class="no_border"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the HTML element that should scroll the carousel forward.</td>							</tr>							<tr class="next_object">								<td colspan="3" class="no_border"></td>								<td>Function</td>								<td>A function that returns any of the other valid values.</td>							</tr>							<tr class="next_object">								<td class="no_border"></td>								<td>key</td>								<td>null</td>								<td>Number</td>								<td>The keyCode of the keyboard-key that should scroll the carousel forward.</td>							</tr>							<tr class="next_object">								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Can be: <code>&quot;up&quot;</code>, <code>&quot;down&quot;</code>, <code>&quot;left&quot;</code> or <code>&quot;right&quot;</code>.</td>							</tr><?php	echo object_config('next_');?>							<tr class="next_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Any valid string for <code>next.button</code> or <code>next.key</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>next.key</code>.</td>							</tr>							 <!-- /next_object -->							<tr class="new_item">								<td><a href="#pagination_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">pagination<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for scrolling via the &quot;pagination&quot; buttons/bullets or keys: <code>container</code>, <code>keys</code>, <code>anchorBuilder</code>, <code>items</code>, <code>deviation</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>queue</code>, <code>event</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code> and <code>onEnd</code>.<br />									<p class="alert">This object is the same as the <code>scroll</code> object, except for <code>container</code>, <code>keys</code>, <code>anchorBuilder</code> and <code>deviation</code>. What is not specified in this object, will be inherited from the <code>scroll</code> object.</p>								</td>							</tr>							<tr id="pagination_object" class="pagination_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="pagination_object no_border">								<td></td>								<td>container</td>								<td>null</td>								<td>String</td>								<td>A jQuery-selector for the HTML element that should contain the pagination-links.</td>							</tr>							<tr class="pagination_object">								<td colspan="3" class="no_border"></td>								<td>jQuery-object</td>								<td>A jQuery-object of the HTML element that should contain the pagination-links.</td>							</tr>							<tr class="pagination_object">								<td colspan="3" class="no_border"></td>								<td>Function</td>								<td>A function that returns any of the other valid values.</td>							</tr>							<tr class="pagination_object">								<td class="no_border"></td>								<td>keys</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the carousel can be controlled via the keyboard-key 1-9.<br />									<em>Note:</em> any page after page 9 will not be accessible via the keyboard.</td>							</tr>							<tr class="pagination_object">								<td class="no_border"></td>								<td>anchorBuilder</td>								<td>null</td>								<td>Function</td>								<td>Function to use for building the anchors of the pagination.<br />									If <code>null</code>, the public method <code>pageAnchorBuilder</code> is used:<br />									<code>$.fn.carouFredSel.pageAnchorBuilder: function(nr, item) {<br />										&nbsp; &nbsp; return '&lt;a href=&quot;#'+nr+'&quot;&gt;&lt;span&gt;'+nr+'&lt;/span&gt;&lt;/a&gt;';<br />									};</code><br />									This function receives 1 parameter:								</td>							</tr>							<tr class="pagination_object no_border">								<td colspan="2"></td>								<td colspan="3"><pre class="brush: jscript;">nr	//	The page number.</pre><br />								</td>							</tr>							<tr class="pagination_object">								<td colspan="3" class="no_border"></td>								<td>Boolean</td>								<td>If <code>false</code>, instead of building the pagination, the elements allready available in the <code>container</code> will be used as anchors.</td>							</tr><?php	echo object_config('pagination_');?>							<tr class="pagination_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>String</td>								<td>Any valid string for <code>pagination.container</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Boolean</td>								<td>True or false for <code>pagination.keys</code>.</td>							</tr>							 <!-- /pagination_object -->							<tr class="new_item">								<td><a href="#swipe_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">swipe<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for scrolling via swiping (on touch-devices) or dragging (using a mouse): <code>onTouch</code>, <code>onMouse</code>, <code>options</code>, <code>items</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>queue</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code> and <code>onEnd</code>.<br />									<p class="alert">This object is the same as the <code>scroll</code> object, except for <code>onTouch</code>, <code>onMouse</code> and <code>options</code>. What is not specified in this object, will be inherited from the <code>prev</code> or <code>next</code> object.</p>									<p class="alert">To enable this feature, you'll need to include the <a href="http://labs.skinkers.com/touchSwipe/" target="_blank">jQuery.touchSwipe-plugin</a>.</p>								</td>							</tr>							<tr id="swipe_object" class="swipe_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="swipe_object no_border">								<td></td>								<td>onTouch</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the carousel should scroll via swiping gestures (on touch-devices only).</td>							</tr>							<tr class="swipe_object">								<td class="no_border"></td>								<td>onMouse</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether the carousel should scroll via dragging (on non-touch-devices only).</td>							</tr>							<tr class="swipe_object">								<td class="no_border"></td>								<td>options</td>								<td>null</td>								<td>Object</td>								<td>A map of the configuration used for the touchSwipe-plugin.</td>							</tr><?php	echo object_config('swipe_');?>							<tr class="swipe_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Boolean</td>								<td>True or false for <code>swipe.onTouch</code>.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>swipe.items</code>.</td>							</tr>							 <!-- /swipe_object -->							<tr class="new_item">								<td><a href="#mousewheel_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">mousewheel<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration used for scrolling via the mousewheel: <code>items</code>, <code>fx</code>, <code>easing</code>, <code>duration</code>, <code>pauseOnHover</code>, <code>queue</code>, <code>conditions</code>, <code>onBefore</code>, <code>onAfter</code> and <code>onEnd</code>.<br />									<p class="alert">This object is the same as the <code>scroll</code> object. What is not specified in this object, will be inherited from the <code>prev</code> or <code>next</code> object.</p>									<p class="alert">To enable this feature, you'll need to include the <a href="http://brandonaaron.net/code/mousewheel/docs" target="_blank">jQuery.mousewheel-plugin</a>.</p>								</td>							</tr>							<tr id="mousewheel_object" class="mousewheel_object no_border">								<td colspan="5">{</td>							</tr><?php	echo object_config('mousewheel_');?>							<tr class="mousewheel_object no_border">								<td colspan="5">}</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Boolean</td>								<td>True to copy all options from the <code>scroll</code> object.</td>							</tr>							<tr>								<td colspan="3" class="no_border"></td>								<td>Number</td>								<td>A number for <code>mousewheel.items</code>.</td>							</tr>							 <!-- /mousewheel_object -->						</tbody>					</table>				</div> <!-- /table -->				<p><em>Note:</em> In all callback functions, <code>this</code> refers to the HTML-element of the carousel.<br />					Except for the <code>auto.progress.updater</code>-callback function, where it refers to the HTML-element of <code>auto.progress.bar</code>; and the <code>pagination.anchorBuilder</code>-callback function, where it refers to the HTML-element of the current item.</p>				<p>Have a look at the <a href="code-examples/configuration.php">configuration code examples page</a> for more detailed information on how to use the configuration options.<br />					Working examples can be found on <a href="examples/">these examples pages</a>.</p>				<br />				<h3>Options for the plugin</h3>				<p class="no_marg">After the configuration-object, a second object can be passed to the method containing options for the plugin itself.</p>				<div class="table transparent p1">					<table cellpadding="0" cellspacing="0" border="0" width="930">						<col width="30" />						<col width="130" />						<col width="180" />						<col width="100" />						<thead>							<tr>								<td></td>								<td>Option</td>								<td>Default value</td>								<td>Datatype</td>								<td>Description</td>							</tr>						</thead>						<tbody>							<tr class="new_item">								<td></td>								<td>debug</td>								<td>false</td>								<td>Boolean</td>								<td>Determines whether to log debugging information to the console.</td>							</tr>							<tr class="new_item">								<td></td>								<td>onWindowResize</td>								<td>throttle</td>								<td>String</td>								<td><code>&quot;throttle&quot;</code> to use the throttle-plugin (if it is included on the page) to rate-limit the carousel updating onWindowResize.<br />									<code>&quot;debounce&quot;</code> to use the debounce-plugin. Info: <a href="http://benalman.com/projects/jquery-throttle-debounce-plugin/" target="_blank">jQuery.throttle-debounce-plugin</a>.								</td>							</tr>							<tr class="new_item">								<td><a href="#wrapper_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">wrapper<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration for the wrapper: <code>element</code> and <code>classname</code>.</td>							</tr>							<tr id="wrapper_object" class="wrapper_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="wrapper_object no_border">								<td></td>								<td>element</td>								<td>&quot;div&quot;</td>								<td>String</td>								<td>Type of DOM-element to create for the wrapper.</td>							</tr>							<tr class="wrapper_object no_border">								<td></td>								<td>classname</td>								<td>&quot;caroufredsel_wrapper&quot;</td>								<td>String</td>								<td>The classname to use for the wrapper.</td>							</tr>							<tr class="wrapper_object no_border">								<td colspan="5">}</td>							</tr>							<!-- /wrapper_object -->														<tr class="new_item">								<td><a href="#events_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">events<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration for the events: <code>prefix</code> and <code>namespace</code>.</td>							</tr>							<tr id="events_object" class="events_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="events_object no_border">								<td></td>								<td>prefix</td>								<td>&quot;&quot;</td>								<td>String</td>								<td>Prefix for all events.</td>							</tr>							<tr class="events_object no_border">								<td></td>								<td>namespace</td>								<td>&quot;cfs&quot;</td>								<td>String</td>								<td>Namespace for all events.</td>							</tr>							<tr class="events_object no_border">								<td colspan="5">}</td>							</tr>							<!-- /events_object -->							<tr class="new_item">								<td><a href="#classnames_object" class="arrow"><span>&gt;</span></a></td>								<td colspan="2">classnames<?php echo $paramtxt; ?></td>								<td>Object</td>								<td>A map of the configuration for the classnames: <code>selected</code>, <code>hidden</code> and <code>disabled</code>.</td>							</tr>							<tr id="classnames_object" class="classnames_object no_border">								<td colspan="5">{</td>							</tr>							<tr class="classnames_object no_border">								<td></td>								<td>selected</td>								<td>&quot;selected&quot;</td>								<td>String</td>								<td>Classname for the selected pagination anchor.</td>							</tr>							<tr class="classnames_object no_border">								<td></td>								<td>hidden</td>								<td>&quot;hidden&quot;</td>								<td>String</td>								<td>Classname for the hidden navigational buttons.</td>							</tr>							<tr class="classnames_object no_border">								<td></td>								<td>disabled</td>								<td>&quot;disabled&quot;</td>								<td>String</td>								<td>Classname for the disabled navigational buttons.</td>							</tr>							<tr class="classnames_object no_border">								<td></td>								<td>paused</td>								<td>&quot;paused&quot;</td>								<td>String</td>								<td>Classname for the play-button if the carousel is paused.</td>							</tr>							<tr class="classnames_object no_border">								<td></td>								<td>stopped</td>								<td>&quot;stopped&quot;</td>								<td>String</td>								<td>Classname for the play-button if the carousel is stopped.</td>							</tr>							<tr class="classnames_object no_border">								<td colspan="5">}</td>							</tr>							<!-- /classnames_object -->						</tbody>					</table>				</div>				<div id="override">					<h3>Override by passing new values to the method</h3><pre class="brush: jscript; html-script: true;">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.carouFredSel.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;	$(document).ready(function() {		$(&quot;#foo1&quot;).carouFredSel();		$(&quot;#foo2&quot;).carouFredSel();		$(&quot;#foo3&quot;).carouFredSel({			items		: 3,			direction	: &quot;up&quot;		}, {			debug		: true		});		});&lt;/script&gt;</pre>					<p><em>Note:</em> These changes will only apply to the <code>#foo3</code> carousel.</p>					<br />					<h3>Override by redefining the default option values</h3><pre class="brush: jscript; html-script: true;">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.carouFredSel.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;	$.fn.carouFredSel.defaults.items.visible 	= 3;	$.fn.carouFredSel.defaults.direction 		= &quot;up&quot;;	$(document).ready(function() {		$(&quot;#foo1&quot;).carouFredSel();		$(&quot;#foo2&quot;).carouFredSel();		$(&quot;#foo3&quot;).carouFredSel();	});&lt;/script&gt;</pre>					<p><em>Note:</em> These changes will apply to all the carousels on the page.</p>				</div> <!-- /override -->				<?php	$help_feedback = true;	include_once 'functies/layout_post.php';?>