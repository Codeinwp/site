<?php	$description = 'Find out how exactly to use the custom events with these code examples. For a carousel created with the carouFredSel-plugin.';	$keywords = 'code, examples, custom, events, caroufredsel, help, support';	$title = 'Custom events - Code examples';	include_once '../functies/layout_pre.php';?>				<div id="usage">					<h1>Code examples for the custom events</h1>					<p>In all these examples, a carousel is created using the following code:</p><pre class="brush: jscript;">$(function() {	$(&quot;#foo&quot;).carouFredSel();});</pre>					<br />					<h4 id="_play">The play-event</h4><pre class="brush: jscript;">//	no options$(&quot;#foo&quot;).trigger(&quot;play&quot;);//	play carousel backward$(&quot;#foo&quot;).trigger(&quot;play&quot;, &quot;prev&quot;);//	waint an additional second before scrolling$(&quot;#foo&quot;).trigger(&quot;play&quot;, 1000);//	resume a stopped carousel$(&quot;#foo&quot;).trigger(&quot;play&quot;, true);</pre>					<p>To combine options, place them in an array:</p><pre class="brush: jscript;">//	resume a stopped carousel after waiting an additional second$(&quot;#foo&quot;).trigger(&quot;play&quot;, [1000, true]);//	play carousel backward after waiting an additional second$(&quot;#foo&quot;).trigger(&quot;play&quot;, [&quot;prev&quot;, 1000]);//	resume a stopped carousel backward after waiting an additional second$(&quot;#foo&quot;).trigger(&quot;play&quot;, [&quot;prev&quot;, 1000, true]);</pre>					<br />					<h4 id="_pause">The pause-event</h4><pre class="brush: jscript;">//	pause the timeout between transitions$(&quot;#foo&quot;).trigger(&quot;pause&quot;);//	pause the transitions$(&quot;#foo&quot;).trigger(&quot;pause&quot;, true);//	resume the timeout after the pause$(&quot;#foo&quot;).trigger(&quot;pause&quot;, [null, true]);</pre>					<br />					<h4 id="_stop">The stop-event</h4><pre class="brush: jscript;">//	stop a carousel from automatically scrolling$(&quot;#foo&quot;).trigger(&quot;stop&quot;);//	stop the transition$(&quot;#foo&quot;).trigger(&quot;stop&quot;, true);</pre>					<br />					<h4 id="_finish">The finish-event</h4><pre class="brush: jscript;">//	immediately finish a scrolling carousel$(&quot;#foo&quot;).trigger(&quot;finish&quot;);</pre>					<br />					<h4 id="_resume">The resume-event</h4><pre class="brush: jscript;">//	immediately resume a stopped carousel$(&quot;#foo&quot;).trigger(&quot;resume&quot;);</pre>					<br />					<h4 id="_prev">The prev-event</h4><pre class="brush: jscript;">//	no options$(&quot;#foo&quot;).trigger(&quot;prev&quot;);//	scroll using custom configuration options$(&quot;#foo&quot;).trigger(&quot;prev&quot;, {	fx			: &quot;fade&quot;,	duration	: 300});//	scroll three items$(&quot;#foo&quot;).trigger(&quot;prev&quot;, 3);//	set a custom onAfter-callback function$(&quot;#foo&quot;).trigger(&quot;prev&quot;, function( oldItems, newItems, newSizes ) {	newItems.addClass( &quot;foo&quot; );});//	queue the scrolling if the carousel is being animated$(&quot;#foo&quot;).trigger(&quot;prev&quot;, true);</pre>					<p>Combine options, the order of the options is not important.</p><pre class="brush: jscript;">//	scroll three items with a custom onAfter-callback function using custom configuration options$(&quot;#foo&quot;).trigger(&quot;prev&quot;, [3, true, function( args ) {	args.items.old.addClass( &quot;foo&quot; );}, {	fx			: &quot;fade&quot;,	duration	: 300}]);</pre>					<br />					<h4 id="_next">The next-event</h4>					<p><em>See the description for the <code>prev</code>-event.</em></p>					<h4 id="_slideto">The slideTo-event</h4><pre class="brush: jscript;">//	scroll to the third item$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, 2);//	scroll to an item using a jQuery selector$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, &quot;img.selected&quot;);//	scroll to an item using a jQuery object$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, $(this));//	scroll to the item two items left of the targeted item$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, [$(this), -2]);//	scroll to the third item in the original item order$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, [2, true]);//	scroll to the third item using custom configuration options$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, [2, {	fx			: &quot;fade&quot;,	duration	: 300}]);//	scroll backward to the third item$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, [2, &quot;prev&quot;]);//	scroll forward to the third item$(&quot;#foo&quot;).trigger(&quot;slideTo&quot;, [2, &quot;next&quot;]);</pre>					<p><em>Note:</em> The order of the options for the slideTo-custom event is not important.</p>					<h4 id="_prevpage">The prevPage-event</h4><pre class="brush: jscript;">//	no options$(&quot;#foo&quot;).trigger(&quot;prevPage&quot;);//	scroll using custom configuration options$(&quot;#foo&quot;).trigger(&quot;prevPage&quot;, {	fx			: &quot;fade&quot;,	duration	: 300});//	set a custom onAfter-callback function$(&quot;#foo&quot;).trigger(&quot;prevPage&quot;, function( oldItems, newItems, newSizes ) {	newItems.addClass( &quot;foo&quot; );});</pre>					<p><em>Note:</em> The order of the options for the prevPage-custom event is not important.</p>					<h4 id="_nextpage">The nextPage-event</h4>					<p><em>See the description for the <code>prevPage</code>-event.</em></p>					<h4 id="_slidetopage">The slideToPage-event</h4><pre class="brush: jscript;">//	scroll to the third page$(&quot;#foo&quot;).trigger(&quot;slideToPage&quot;, 2);//	scroll to the third page using custom configuration options$(&quot;#foo&quot;).trigger(&quot;slideToPage&quot;, [2, {	fx			: &quot;fade&quot;,	duration	: 300}]);//	scroll backward to the third page$(&quot;#foo&quot;).trigger(&quot;slideToPage&quot;, [2, &quot;prev&quot;]);//	scroll forward to the third page$(&quot;#foo&quot;).trigger(&quot;slideToPage&quot;, [2, &quot;next&quot;]);</pre>					<p><em>Note:</em> The order of the options for the slideToPage-custom event is not important.</p>					<h4 id="_queue">The queue-event</h4><pre class="brush: jscript;">//	get the entire queue using the triggerHandler-methodconsole.log( $(&quot;#foo&quot;).triggerHandler(&quot;queue&quot;) );//	get the entire queue using the callback function$(&quot;#foo&quot;).trigger(&quot;queue&quot;, function( q ) {	console.log( q );});//	add scrolling 2 items forward to the queue$(&quot;#foo&quot;).trigger(&quot;queue&quot;, [&quot;next&quot;, 2]);//	add scrolling 2 items forward to the queue usint constom configuration options$(&quot;#foo&quot;).trigger(&quot;queue&quot;, [&quot;next&quot;, [2, {	fx			: &quot;fade&quot;,	duration	: 300}]]);//	add scrolling 1 item backward to the queue usint constom configuration options and a custom callback function$(&quot;#foo&quot;).trigger(&quot;queue&quot;, [&quot;next&quot;, [1, {	fx			: &quot;fade&quot;,	duration	: 300}, function( o, n, s ) {	n.addClass( &quot;foo&quot; );}]]);//	set the entire queuevar q = [	//	first, scroll 2 items forward	[&quot;next&quot;, 2],	//	second, scroll 3 items backward	[&quot;prev&quot;, 3],	//	third, scroll 1 item forward using custom configuration options and a custom callback function	[&quot;next&quot;,		[1, {				fx			: &quot;fade&quot;,				duration	: 300			}, function( o, n, s ) {				n.addClass( &quot;foo&quot; );			}		]	]];$(&quot;#foo&quot;).trigger(&quot;queue&quot;, q);</pre>					<h4 id="_insertitem">The insertItem-event</h4><pre class="brush: jscript;">//	insert a string of HTML$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, '&lt;img src=&quot;path/to/img.jpg&quot; /&gt;');//	insert an item using a jQuery selector$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, &quot;#wrapper img:first&quot;);//	insert an item using a jQuery object$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, $(this));//	insert an item at the end of the list in the current item order$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, [$(this), &quot;end&quot;]);//	insert an item at the end of the list in the original item order$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, [$(this), &quot;end&quot;, true]);//	insert an item before the third item$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, [$(this), 2]);//	use a jQuery selector to select the position where to insert the item$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, [$(this), &quot;#foo img:eq(4)&quot;]);//	insert an item before the third item in the original item order$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, [$(this), 2, true]);//	insert an item two items left of the targeted item$(&quot;#foo&quot;).trigger(&quot;insertItem&quot;, [$(this), &quot;#foo img:eq(4)&quot;, -2]);</pre>					<p><em>Note:</em> The order of the options for the insertItem-custom event is not important.</p>					<h4 id="_removeitem">The removeItem-event</h4><pre class="brush: jscript;">//	remove the third item$(&quot;#foo&quot;).trigger(&quot;removeItem&quot;, 2);//	remove an item using a jQuery selector$(&quot;#foo&quot;).trigger(&quot;removeItem&quot;, &quot;img.selected&quot;);//	remove an item using a jQuery object$(&quot;#foo&quot;).trigger(&quot;removeItem&quot;, $(this));//	remove the third item in the original item order$(&quot;#foo&quot;).trigger(&quot;removeItem&quot;, [2, true]);//	remove the item two items left of the targeted item$(&quot;#foo&quot;).trigger(&quot;removeItem&quot;, [$(this), -2]);</pre>					<p><em>Note:</em> The order of the options for the removeItem-custom event is not important.</p>					<h4 id="_onbefore">The onBefore-event</h4><pre class="brush: jscript;">//	add a new function to the next onBefore-callback.$(&quot;#foo&quot;).trigger(&quot;onBefore&quot;, function( o, n, s ) {	n.addClass( &quot;foo&quot; );});</pre>					<br />					<h4 id="_onafter">The onAfter-event</h4>					<p><em>See the description for the <code>onBefore</code>-event.</em></p>					<h4 id="_configuration">The configuration-event</h4><pre class="brush: jscript;">//	get the entire configuration object using the triggerHandler-methodconsole.log( $(&quot;#foo&quot;).triggerHandler(&quot;configuration&quot;) );//	get the entire configuration object using the callback function$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, function( options ) {	console.log( options );});//	get the value for a certain option using the triggerHandler-methodvar direction = $(&quot;#foo&quot;).triggerHandler(&quot;configuration&quot;, &quot;direction&quot;);alert( &quot;The carousel scrolls in this direction: &quot; + direction );var visible = $(&quot;#foo&quot;).triggerHandler(&quot;configuration&quot;, &quot;items.visible&quot;);alert( &quot;The carousel has &quot; + visible + &quot; items visible&quot; );//	get the value for a certain option using the callback function$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, [&quot;direction&quot;, function( value ) {	alert( &quot;The carousel scrolls in this direction: &quot; + value );}]);$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, [&quot;items.visible&quot;, function( value ) {	alert( &quot;The carousel has &quot; + value + &quot; items visible&quot; );}]);//	set a value for a certain option$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, [&quot;direction&quot;, &quot;up&quot;]);$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, [&quot;items.visible&quot;, 3]);//	set a value, but don't reinitiate the carousel$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, [&quot;auto.duration&quot;, 300, false]);//	set a map of options$(&quot;#foo&quot;).trigger(&quot;configuration&quot;, {	direction	: &quot;up&quot;,	items: {		visible		: 3	},	auto: {		fx			: &quot;fade&quot;,		duration	: 300	}});</pre>					<p><em>Note:</em> The order of the options in the configuration-custom event should not be altered.</p>					<h4 id="_queue">The synchronise-event</h4><pre class="brush: jscript;">//	synchronise the carousels spedified in the configuration$(&quot;#foo&quot;).trigger(&quot;synchronise&quot;);//	synchronise a custom carousel$(&quot;#foo&quot;).trigger(&quot;synchronise&quot;, &quot;#foo_2&quot;);//	synchronise a custom carousel without inheriting the scrolling options$(&quot;#foo&quot;).trigger(&quot;synchronise&quot;, [&quot;#foo_2&quot;, false]);//	synchronise a custom carousel without inheriting the scrolling options and scroll in the opposite direction$(&quot;#foo&quot;).trigger(&quot;synchronise&quot;, [&quot;#foo_2&quot;, false, false]);//	synchronise a custom carousel with a deviation of 2 items$(&quot;#foo&quot;).trigger(&quot;synchronise&quot;, [&quot;#foo_2&quot;, true, true, 2]);</pre>					<br />					<h4 id="_linkanchors">The linkAnchors-event</h4><pre class="brush: jscript;">//	no options: link the anchors with class=&quot;caroufredsel&quot; inside the body$(&quot;#foo&quot;).trigger(&quot;linkAnchors&quot;);//	link the anchors with class=&quot;caroufredsel&quot; inside the div with id=&quot;wrapper&quot;$(&quot;#foo&quot;).trigger(&quot;linkAnchors&quot;, &quot;div#wrapper&quot;);//	link the anchors with class=&quot;custom&quot; inside the div with id=&quot;wrapper&quot;$(&quot;#foo&quot;).trigger(&quot;linkAnchors&quot;, [&quot;div#wrapper&quot;, &quot;.custom&quot;]);</pre>					<br />					<h4 id="_updatesizes">The updateSizes-event</h4><pre class="brush: jscript;">$(&quot;#foo&quot;).trigger(&quot;updateSizes&quot;);</pre>					<br />					<h4 id="_currentposition">The currentPosition-event</h4><pre class="brush: jscript;">//	get the current position using the triggerHandler-methodvar pos = $(&quot;#foo&quot;).triggerHandler(&quot;currentPosition&quot;);alert( &quot;The carousel is at item number &quot; + pos );//	get the current position using the callback function$(&quot;#foo&quot;).trigger(&quot;currentPosition&quot;, function( pos ) {	alert( &quot;The carousel is at item number &quot; + pos );});</pre>					<br />					<h4 id="_currentpage">The currentPage-event</h4><pre class="brush: jscript;">//	get the current page number using the triggerHandler-methodvar page = $(&quot;#foo&quot;).triggerHandler(&quot;currentPage&quot;);alert( &quot;The carousel is at page number &quot; + page );//	get the current page number using the callback function$(&quot;#foo&quot;).trigger(&quot;currentPage&quot;, function( page ) {	alert( &quot;The carousel is at page number &quot; + page );});</pre>					<br />					<h4 id="_currentvisible">The currentVisible-event</h4><pre class="brush: jscript;">//	get a jQuery object of the current visible items using the triggerHandler-methodvar items = $(&quot;#foo&quot;).triggerHandler(&quot;currentVisible&quot;);items.addClass( &quot;foo&quot; );//	get a jQuery object of the current visible items using the callback function$(&quot;#foo&quot;).trigger(&quot;currentVisible&quot;, function( items ) {	items.addClass( &quot;foo&quot; );});</pre>					<br />					<h4 id="_slice">The slice-event</h4><pre class="brush: jscript;">//	get a jQuery object of the third item (from the original order) using the triggerHandler-methodvar item = $(&quot;#foo&quot;).triggerHandler(&quot;slice&quot;, [3, 4]);item.addClass( &quot;foo&quot; );//	get a jQuery object of the third, fourth and fifth items (from the original order) using the triggerHandler-methodvar items = $(&quot;#foo&quot;).triggerHandler(&quot;slice&quot;, [3, 6]);items.addClass( &quot;foo&quot; );//	get a jQuery object of the third item (from the original order) using the callback function$(&quot;#foo&quot;).trigger(&quot;slice&quot;, [3, 4, function( item ) {	item.addClass( &quot;foo&quot; );}]);</pre>					<br />					<h4 id="_isscrolling">The isScrolling-event</h4><pre class="brush: jscript;">//	find out whether the carousel is scrolling using the triggerHandler-methodvar scrolling = $(&quot;#foo&quot;).triggerHandler(&quot;isScrolling&quot;);if ( scrolling ) {	$(&quot;#foo&quot;).addClass( &quot;scrolling&quot; );} else {	$(&quot;#foo&quot;).removeClass( &quot;scrolling&quot; );	}//	find out whether the carousel is scrolling using the callback function$(&quot;#foo&quot;).trigger(&quot;isScrolling&quot;, function( scrolling ) {	if ( scrolling ) {		$(this).addClass( &quot;scrolling&quot; );	} else {		$(this).removeClass( &quot;scrolling&quot; );		}});</pre>					<br />					<h4 id="_ispaused">The isPaused-event</h4>					<p><em>See the description for the <code>isScrolling</code>-event.</em></p>					<h4 id="_isstopped">The isStopped-event</h4>					<p><em>See the description for the <code>isScrolling</code>-event.</em></p>					<h4 id="_destroy">The destroy-event</h4><pre class="brush: jscript;">//	no options$(&quot;#foo&quot;).trigger(&quot;destroy&quot;);//	put the items back in to the original order$(&quot;#foo&quot;).trigger(&quot;destroy&quot;, true);</pre>				<br />				<br />				<h3>Helper public methods</h3>				<p>Some of the functions used by the plugin are so generic, they should not only be available for carousels and are therefor stored in a public method making them accessible for other usage.</p><pre class="brush: jscript;">//	set a cookie$.fn.carouFredSel.cookie.set( 'cookieName', 'qwerty' );//	get a cookievar cookie = $.fn.carouFredSel.cookie.get( 'cookieName' );//	remove a cookievar cookie = $.fn.carouFredSel.cookie.remove( 'cookieName' );</pre>				</div> <!-- /usage --><?php	include_once '../functies/layout_post.php';?>